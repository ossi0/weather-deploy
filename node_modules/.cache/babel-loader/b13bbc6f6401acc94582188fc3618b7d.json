{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ossi Laurila\\\\Desktop\\\\weatherapp\\\\src\\\\components\\\\searchbar.jsx\";\nimport React, { Component } from \"react\";\nimport { returnStations, showData, showSnow } from \"../index\";\nimport Metolib from \"@fmidev/metolib\";\n\nclass Searchbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDropdownVisibility = state => {\n      this.setState({\n        visible: state === 0 ? false : true\n      });\n    };\n\n    this.handleDropdownSearch = event => {\n      this.setState({\n        value: event.target.value\n      });\n    };\n\n    this.handleOptionClick = (id, option) => {\n      console.log(option); // Määritellään ensiksi tämänhetkinen aika (dt) sekä aika vuosi sitten (dtstart)\n\n      var dt = new Date();\n      var dtstart = new Date(new Date().getFullYear() - 1, new Date().getMonth(), new Date().getDate());\n      var dtsnowstart = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 30);\n      var parser = new Metolib.WfsRequestParser();\n      var SERVER_URL = \"http://opendata.fmi.fi/wfs\";\n      var STORED_QUERY_OBSERVATION = \"fmi::observations::weather::daily::multipointcoverage\";\n\n      if (option === 1) {\n        parser.getData({\n          url: SERVER_URL,\n          storedQueryId: STORED_QUERY_OBSERVATION,\n          requestParameter: \"tmin,tmax\",\n          begin: new Date(dtstart).getTime(),\n          end: new Date(dt).getTime(),\n          fmisid: id,\n          callback: function (data, errors) {\n            console.log(data);\n            showData(data);\n\n            if (errors) {\n              // Miten tämä toimii??\n              console.log(\"Virhe\");\n            }\n          }\n        });\n      }\n\n      if (option === 4) {\n        console.log(\"lumensyvyyden kuvaaja\");\n        parser.getData({\n          url: SERVER_URL,\n          storedQueryId: STORED_QUERY_OBSERVATION,\n          requestParameter: \"snow\",\n          begin: new Date(dtsnowstart).getTime(),\n          end: new Date(dt).getTime(),\n          fmisid: id,\n          callback: function (data, errors) {\n            console.log(data.locations[0].data.snow.timeValuePairs.length);\n\n            if (data.locations.length > 0) {\n              showSnow(data);\n            } else {\n              alert(\"Asemalta ei saatu tietoja. Kokeile toista asemaa\");\n            }\n          }\n        });\n      }\n    };\n\n    this.state = {\n      visible: false,\n      value: \"\"\n    };\n    this.handleDropdownSearch = this.handleDropdownSearch.bind(this);\n  }\n\n  render() {\n    const option = (name, key) => React.createElement(\"a\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      // href: key,\n      key: key,\n      onMouseDown: () => {\n        // 4 = lumensyvyys, 1 = lämpötilakuvaaja\n        if (window.location.pathname === \"/lumensyvyys\") {\n          this.handleOptionClick(key, 4);\n        }\n\n        if (window.location.pathname === \"/kuvaaja\" || \"/\") {\n          this.handleOptionClick(key, 1);\n        }\n      }\n    }, name);\n\n    const fetchOptions = () => {\n      var optionlist = [];\n      returnStations(this.state.value).forEach((value, index) => {\n        optionlist.push(option(value[0], value[1]));\n      });\n      return optionlist;\n    };\n\n    const dropdownVisibleClass = \"dropdown-content\";\n    const dropdownHiddenClass = \"dropdown-content hidden\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"search\",\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-header justify-content-center \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, \"Valitse haluamasi mittausasema havaintohistoriaa varten\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body justify-content-center\",\n      onFocus: () => this.handleDropdownVisibility(1),\n      onBlur: () => this.handleDropdownVisibility(0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      placeholder: \"Hae...\",\n      id: \"dropdowninput\",\n      onChange: this.handleDropdownSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"dropdownbox\",\n      className: this.state.visible === true ? dropdownVisibleClass : dropdownHiddenClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, fetchOptions()))));\n  }\n\n}\n\nexport default Searchbar;","map":{"version":3,"sources":["C:/Users/Ossi Laurila/Desktop/weatherapp/src/components/searchbar.jsx"],"names":["React","Component","returnStations","showData","showSnow","Metolib","Searchbar","constructor","props","handleDropdownVisibility","state","setState","visible","handleDropdownSearch","event","value","target","handleOptionClick","id","option","console","log","dt","Date","dtstart","getFullYear","getMonth","getDate","dtsnowstart","parser","WfsRequestParser","SERVER_URL","STORED_QUERY_OBSERVATION","getData","url","storedQueryId","requestParameter","begin","getTime","end","fmisid","callback","data","errors","locations","snow","timeValuePairs","length","alert","bind","render","name","key","createElement","style","cursor","onMouseDown","window","location","pathname","fetchOptions","optionlist","forEach","index","push","dropdownVisibleClass","dropdownHiddenClass"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { returnStations, showData, showSnow } from \"../index\";\r\nimport Metolib from \"@fmidev/metolib\";\r\n\r\nclass Searchbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n      value: \"\",\r\n    };\r\n\r\n    this.handleDropdownSearch = this.handleDropdownSearch.bind(this);\r\n  }\r\n\r\n  handleDropdownVisibility = (state) => {\r\n    this.setState({ visible: state === 0 ? false : true });\r\n  };\r\n  handleDropdownSearch = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n  // Tekee datapyynnön fmi:ltä ja kutsuu datankäsittelijäfunktion showData (index.js)\r\n  handleOptionClick = (id, option) => {\r\n    console.log(option);\r\n    // Määritellään ensiksi tämänhetkinen aika (dt) sekä aika vuosi sitten (dtstart)\r\n    var dt = new Date();\r\n    var dtstart = new Date(\r\n      new Date().getFullYear() - 1,\r\n      new Date().getMonth(),\r\n      new Date().getDate()\r\n    );\r\n    var dtsnowstart = new Date(\r\n      new Date().getFullYear(),\r\n      new Date().getMonth(),\r\n      new Date().getDate() - 30\r\n    );\r\n\r\n    var parser = new Metolib.WfsRequestParser();\r\n    var SERVER_URL = \"http://opendata.fmi.fi/wfs\";\r\n    var STORED_QUERY_OBSERVATION =\r\n      \"fmi::observations::weather::daily::multipointcoverage\";\r\n    if (option === 1) {\r\n      parser.getData({\r\n        url: SERVER_URL,\r\n        storedQueryId: STORED_QUERY_OBSERVATION,\r\n        requestParameter: \"tmin,tmax\",\r\n        begin: new Date(dtstart).getTime(),\r\n        end: new Date(dt).getTime(),\r\n        fmisid: id,\r\n        callback: function (data, errors) {\r\n          console.log(data);\r\n          showData(data);\r\n          if (errors) {\r\n            // Miten tämä toimii??\r\n            console.log(\"Virhe\");\r\n          }\r\n        },\r\n      });\r\n    }\r\n    if (option === 4) {\r\n      console.log(\"lumensyvyyden kuvaaja\");\r\n      parser.getData({\r\n        url: SERVER_URL,\r\n        storedQueryId: STORED_QUERY_OBSERVATION,\r\n        requestParameter: \"snow\",\r\n        begin: new Date(dtsnowstart).getTime(),\r\n        end: new Date(dt).getTime(),\r\n        fmisid: id,\r\n        callback: function (data, errors) {\r\n          console.log(data.locations[0].data.snow.timeValuePairs.length);\r\n          if (data.locations.length > 0) {\r\n            showSnow(data);\r\n          } else {\r\n            alert(\"Asemalta ei saatu tietoja. Kokeile toista asemaa\");\r\n          }\r\n\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const option = (name, key) =>\r\n      React.createElement(\r\n        \"a\",\r\n        {\r\n          style: {\r\n            cursor: \"pointer\",\r\n          },\r\n          // href: key,\r\n          key: key,\r\n          onMouseDown: () => {\r\n            // 4 = lumensyvyys, 1 = lämpötilakuvaaja\r\n            if (window.location.pathname === \"/lumensyvyys\") {\r\n              this.handleOptionClick(key, 4);\r\n            }\r\n            if (window.location.pathname === \"/kuvaaja\" || \"/\") {\r\n              this.handleOptionClick(key, 1);\r\n            }\r\n          },\r\n        },\r\n        name\r\n      );\r\n    const fetchOptions = () => {\r\n      var optionlist = [];\r\n      returnStations(this.state.value).forEach((value, index) => {\r\n        optionlist.push(option(value[0], value[1]));\r\n      });\r\n      return optionlist;\r\n    };\r\n    const dropdownVisibleClass = \"dropdown-content\";\r\n    const dropdownHiddenClass = \"dropdown-content hidden\";\r\n    return (\r\n      <div id=\"search\" className=\"card\">\r\n        <div className=\"card-header justify-content-center \">\r\n          Valitse haluamasi mittausasema havaintohistoriaa varten\r\n        </div>\r\n        <div\r\n          className=\"card-body justify-content-center\"\r\n          onFocus={() => this.handleDropdownVisibility(1)}\r\n          onBlur={() => this.handleDropdownVisibility(0)}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            placeholder=\"Hae...\"\r\n            id=\"dropdowninput\"\r\n            onChange={this.handleDropdownSearch}\r\n          />\r\n          <div className=\"dropdown\">\r\n            <div\r\n              id=\"dropdownbox\"\r\n              className={\r\n                this.state.visible === true\r\n                  ? dropdownVisibleClass\r\n                  : dropdownHiddenClass\r\n              }\r\n            >\r\n              {fetchOptions()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;\r\n"]},"metadata":{},"sourceType":"module"}