{"ast":null,"code":"import { slice } from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport range from \"./range.js\";\nimport { tickStep } from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\nexport default function () {\n  var value = identity,\n    domain = extent,\n    threshold = sturges;\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n    var i,\n      n = data.length,\n      x,\n      values = new Array(n);\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n    var xz = domain(values),\n      x0 = xz[0],\n      x1 = xz[1],\n      tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n    var bins = new Array(m + 1),\n      bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n    return bins;\n  }\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n  return histogram;\n}","map":{"version":3,"names":["slice","bisect","constant","extent","identity","range","tickStep","sturges","value","domain","threshold","histogram","data","Array","isArray","from","i","n","length","x","values","xz","x0","x1","tz","Math","ceil","m","shift","pop","bins","bin","push","_","arguments","thresholds","call"],"sources":["C:/Users/Ossi Laurila/Desktop/weatherapp/node_modules/d3-array/src/bin.js"],"sourcesContent":["import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport range from \"./range.js\";\nimport {tickStep} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}