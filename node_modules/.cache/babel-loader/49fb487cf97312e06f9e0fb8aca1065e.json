{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.async = global.async || {});\n})(this, function (exports) {\n  'use strict';\n\n  function slice(arrayLike, start) {\n    start = start | 0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n\n    for (var idx = 0; idx < newLen; idx++) {\n      newArr[idx] = arrayLike[start + idx];\n    }\n\n    return newArr;\n  }\n\n  var initialParams = function (fn) {\n    return function ()\n    /*...args, callback*/\n    {\n      var args = slice(arguments);\n      var callback = args.pop();\n      fn.call(this, args, callback);\n    };\n  };\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n\n  function wrap(defer) {\n    return function (fn\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      defer(function () {\n        fn.apply(null, args);\n      });\n    };\n  }\n\n  var _defer;\n\n  if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else if (hasNextTick) {\n    _defer = process.nextTick;\n  } else {\n    _defer = fallback;\n  }\n\n  var setImmediate$1 = wrap(_defer);\n  /**\n   * Take a sync function and make it async, passing its return value to a\n   * callback. This is useful for plugging sync functions into a waterfall,\n   * series, or other async functions. Any arguments passed to the generated\n   * function will be passed to the wrapped function (except for the final\n   * callback argument). Errors thrown will be passed to the callback.\n   *\n   * If the function passed to `asyncify` returns a Promise, that promises's\n   * resolved/rejected state will be used to call the callback, rather than simply\n   * the synchronous return value.\n   *\n   * This also means you can asyncify ES2017 `async` functions.\n   *\n   * @name asyncify\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @alias wrapSync\n   * @category Util\n   * @param {Function} func - The synchronous function, or Promise-returning\n   * function to convert to an {@link AsyncFunction}.\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n   * invoked with `(args..., callback)`.\n   * @example\n   *\n   * // passing a regular synchronous function\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(JSON.parse),\n   *     function (data, next) {\n   *         // data is the result of parsing the text.\n   *         // If there was a parsing error, it would have been caught.\n   *     }\n   * ], callback);\n   *\n   * // passing a function returning a promise\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(function (contents) {\n   *         return db.model.create(contents);\n   *     }),\n   *     function (model, next) {\n   *         // `model` is the instantiated model object.\n   *         // If there was an error, this function would be skipped.\n   *     }\n   * ], callback);\n   *\n   * // es2017 example, though `asyncify` is not needed if your JS environment\n   * // supports async functions out of the box\n   * var q = async.queue(async.asyncify(async function(file) {\n   *     var intermediateStep = await processFile(file);\n   *     return await somePromise(intermediateStep)\n   * }));\n   *\n   * q.push(files);\n   */\n\n  function asyncify(func) {\n    return initialParams(function (args, callback) {\n      var result;\n\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      } // if result is Promise object\n\n\n      if (isObject(result) && typeof result.then === 'function') {\n        result.then(function (value) {\n          invokeCallback(callback, null, value);\n        }, function (err) {\n          invokeCallback(callback, err.message ? err : new Error(err));\n        });\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (e) {\n      setImmediate$1(rethrow, e);\n    }\n  }\n\n  function rethrow(error) {\n    throw error;\n  }\n\n  var supportsSymbol = typeof Symbol === 'function';\n\n  function isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n\n  function wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n  }\n\n  function applyEach$1(eachfn) {\n    return function (fns\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      var go = initialParams(function (args, callback) {\n        var that = this;\n        return eachfn(fns, function (fn, cb) {\n          wrapAsync(fn).apply(that, args.concat(cb));\n        }, callback);\n      });\n\n      if (args.length) {\n        return go.apply(this, args);\n      } else {\n        return go;\n      }\n    };\n  }\n  /** Detect free variable `global` from Node.js. */\n\n\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Built-in value references. */\n\n  var Symbol$1 = root.Symbol;\n  /** Used for built-in method references. */\n\n  var objectProto = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var nativeObjectToString = objectProto.toString;\n  /** Built-in value references. */\n\n  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n        tag = value[symToStringTag$1];\n\n    try {\n      value[symToStringTag$1] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag;\n      } else {\n        delete value[symToStringTag$1];\n      }\n    }\n\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$1 = Object.prototype;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var nativeObjectToString$1 = objectProto$1.toString;\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n\n  function objectToString(value) {\n    return nativeObjectToString$1.call(value);\n  }\n  /** `Object#toString` result references. */\n\n\n  var nullTag = '[object Null]';\n  var undefinedTag = '[object Undefined]';\n  /** Built-in value references. */\n\n  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    value = Object(value);\n    return symToStringTag && symToStringTag in value ? getRawTag(value) : objectToString(value);\n  }\n  /** `Object#toString` result references. */\n\n\n  var asyncTag = '[object AsyncFunction]';\n  var funcTag = '[object Function]';\n  var genTag = '[object GeneratorFunction]';\n  var proxyTag = '[object Proxy]';\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /** Used as references for various `Number` constants. */\n\n\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  } // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n\n\n  var breakLoop = {};\n  /**\n   * This method returns `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.3.0\n   * @category Util\n   * @example\n   *\n   * _.times(2, _.noop);\n   * // => [undefined, undefined]\n   */\n\n  function noop() {// No operation performed.\n  }\n\n  function once(fn) {\n    return function () {\n      if (fn === null) return;\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n\n  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\n  var getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n  };\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /** `Object#toString` result references. */\n\n\n  var argsTag = '[object Arguments]';\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$3 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n  /** Built-in value references. */\n\n  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n  var isArray = Array.isArray;\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n  function stubFalse() {\n    return false;\n  }\n  /** Detect free variable `exports`. */\n\n\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /** Used as references for various `Number` constants. */\n\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /** `Object#toString` result references. */\n\n\n  var argsTag$1 = '[object Arguments]';\n  var arrayTag = '[object Array]';\n  var boolTag = '[object Boolean]';\n  var dateTag = '[object Date]';\n  var errorTag = '[object Error]';\n  var funcTag$1 = '[object Function]';\n  var mapTag = '[object Map]';\n  var numberTag = '[object Number]';\n  var objectTag = '[object Object]';\n  var regexpTag = '[object RegExp]';\n  var setTag = '[object Set]';\n  var stringTag = '[object String]';\n  var weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]';\n  var dataViewTag = '[object DataView]';\n  var float32Tag = '[object Float32Array]';\n  var float64Tag = '[object Float64Array]';\n  var int8Tag = '[object Int8Array]';\n  var int16Tag = '[object Int16Array]';\n  var int32Tag = '[object Int32Array]';\n  var uint8Tag = '[object Uint8Array]';\n  var uint8ClampedTag = '[object Uint8ClampedArray]';\n  var uint16Tag = '[object Uint16Array]';\n  var uint32Tag = '[object Uint32Array]';\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /** Detect free variable `exports`. */\n\n\n  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports$1 && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      return freeProcess && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /** Used for built-in method references. */\n\n  var objectProto$2 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$5 = Object.prototype;\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;\n    return value === proto;\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeKeys = overArg(Object.keys, Object);\n  /** Used for built-in method references. */\n\n  var objectProto$4 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n      if (item.done) return null;\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n\n  function createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n      return i < len ? {\n        value: obj[key],\n        key: key\n      } : null;\n    };\n  }\n\n  function iterator(coll) {\n    if (isArrayLike(coll)) {\n      return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n\n  function onlyOnce(fn) {\n    return function () {\n      if (fn === null) throw new Error(\"Callback was already called.\");\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n\n  function _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n      callback = once(callback || noop);\n\n      if (limit <= 0 || !obj) {\n        return callback(null);\n      }\n\n      var nextElem = iterator(obj);\n      var done = false;\n      var running = 0;\n\n      function iterateeCallback(err, value) {\n        running -= 1;\n\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (value === breakLoop || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else {\n          replenish();\n        }\n      }\n\n      function replenish() {\n        while (running < limit && !done) {\n          var elem = nextElem();\n\n          if (elem === null) {\n            done = true;\n\n            if (running <= 0) {\n              callback(null);\n            }\n\n            return;\n          }\n\n          running += 1;\n          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n        }\n      }\n\n      replenish();\n    };\n  }\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name eachOfLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`. The `key` is the item's key, or index in the case of an\n   * array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  function eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n  }\n\n  function doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n      return fn(iterable, limit, iteratee, callback);\n    };\n  } // eachOf implementation optimized for array-likes\n\n\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n\n    if (length === 0) {\n      callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === breakLoop) {\n        callback(null);\n      }\n    }\n\n    for (; index < length; index++) {\n      iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n  } // a generic version of eachOf which can handle array, object, and iterator cases.\n\n\n  var eachOfGeneric = doLimit(eachOfLimit, Infinity);\n  /**\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n   * to the iteratee.\n   *\n   * @name eachOf\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEachOf\n   * @category Collection\n   * @see [async.each]{@link module:Collections.each}\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each\n   * item in `coll`.\n   * The `key` is the item's key, or index in the case of an array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @example\n   *\n   * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n   * var configs = {};\n   *\n   * async.forEachOf(obj, function (value, key, callback) {\n   *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n   *         if (err) return callback(err);\n   *         try {\n   *             configs[key] = JSON.parse(data);\n   *         } catch (e) {\n   *             return callback(e);\n   *         }\n   *         callback();\n   *     });\n   * }, function (err) {\n   *     if (err) console.error(err.message);\n   *     // configs is now a map of JSON data\n   *     doSomethingWith(configs);\n   * });\n   */\n\n  var eachOf = function (coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n  };\n\n  function doParallel(fn) {\n    return function (obj, iteratee, callback) {\n      return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n  }\n\n  function _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachfn(arr, function (value, _, callback) {\n      var index = counter++;\n\n      _iteratee(value, function (err, v) {\n        results[index] = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n  /**\n   * Produces a new collection of values by mapping each value in `coll` through\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\n   * and a callback for when it has finished processing. Each of these callback\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n   * `iteratee` passes an error to its callback, the main `callback` (for the\n   * `map` function) is immediately called with the error.\n   *\n   * Note, that since this function applies the `iteratee` to each item in\n   * parallel, there is no guarantee that the `iteratee` functions will complete\n   * in order. However, the results array will be in the same order as the\n   * original `coll`.\n   *\n   * If `map` is passed an Object, the results will be an Array.  The results\n   * will roughly be in the order of the original Objects' keys (but this can\n   * vary across JavaScript engines).\n   *\n   * @name map\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an Array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @example\n   *\n   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n   *     // results is now an array of stats for each file\n   * });\n   */\n\n\n  var map = doParallel(_asyncMap);\n  /**\n   * Applies the provided arguments to each function in the array, calling\n   * `callback` after all functions have completed. If you only provide the first\n   * argument, `fns`, then it will return a function which lets you pass in the\n   * arguments as if it were a single function call. If more arguments are\n   * provided, `callback` is required while `args` is still optional.\n   *\n   * @name applyEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n   * to all call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {Function} - If only the first argument, `fns`, is provided, it will\n   * return a function which lets you pass in the arguments as if it were a single\n   * function call. The signature is `(..args, callback)`. If invoked with any\n   * arguments, `callback` is required.\n   * @example\n   *\n   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n   *\n   * // partial application example:\n   * async.each(\n   *     buckets,\n   *     async.applyEach([enableSearch, updateSchema]),\n   *     callback\n   * );\n   */\n\n  var applyEach = applyEach$1(map);\n\n  function doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n      return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n  }\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name mapLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   */\n\n\n  var mapLimit = doParallelLimit(_asyncMap);\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n   *\n   * @name mapSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   */\n\n  var mapSeries = doLimit(mapLimit, 1);\n  /**\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n   *\n   * @name applyEachSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n   * @category Control Flow\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n   * call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {Function} - If only the first argument is provided, it will return\n   * a function which lets you pass in the arguments as if it were a single\n   * function call.\n   */\n\n  var applyEachSeries = applyEach$1(mapSeries);\n  /**\n   * Creates a continuation function with some arguments already applied.\n   *\n   * Useful as a shorthand when combined with other control flow functions. Any\n   * arguments passed to the returned function are added to the arguments\n   * originally passed to apply.\n   *\n   * @name apply\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {Function} fn - The function you want to eventually apply all\n   * arguments to. Invokes with (arguments...).\n   * @param {...*} arguments... - Any number of arguments to automatically apply\n   * when the continuation is called.\n   * @returns {Function} the partially-applied function\n   * @example\n   *\n   * // using apply\n   * async.parallel([\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\n   * ]);\n   *\n   *\n   * // the same process without using apply\n   * async.parallel([\n   *     function(callback) {\n   *         fs.writeFile('testfile1', 'test1', callback);\n   *     },\n   *     function(callback) {\n   *         fs.writeFile('testfile2', 'test2', callback);\n   *     }\n   * ]);\n   *\n   * // It's possible to pass any number of additional arguments when calling the\n   * // continuation:\n   *\n   * node> var fn = async.apply(sys.puts, 'one');\n   * node> fn('two', 'three');\n   * one\n   * two\n   * three\n   */\n\n  var apply = function (fn\n  /*, ...args*/\n  ) {\n    var args = slice(arguments, 1);\n    return function ()\n    /*callArgs*/\n    {\n      var callArgs = slice(arguments);\n      return fn.apply(null, args.concat(callArgs));\n    };\n  };\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n\n\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n\n      return object;\n    };\n  }\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  var baseFor = createBaseFor();\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n\n\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  /**\n   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n   * their requirements. Each function can optionally depend on other functions\n   * being completed first, and each function is run as soon as its requirements\n   * are satisfied.\n   *\n   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n   * will stop. Further tasks will not execute (so any other functions depending\n   * on it will not run), and the main `callback` is immediately called with the\n   * error.\n   *\n   * {@link AsyncFunction}s also receive an object containing the results of functions which\n   * have completed so far as the first argument, if they have dependencies. If a\n   * task function has no dependencies, it will only be passed a callback.\n   *\n   * @name auto\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Object} tasks - An object. Each of its properties is either a\n   * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n   * in the array. The object's key of a property serves as the name of the task\n   * defined by that property, i.e. can be used when specifying requirements for\n   * other tasks. The function receives one or two arguments:\n   * * a `results` object, containing the results of the previously executed\n   *   functions, only passed if the task has any dependencies,\n   * * a `callback(err, result)` function, which must be called when finished,\n   *   passing an `error` (which can be `null`) and the result of the function's\n   *   execution.\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\n   * determining the maximum number of tasks that can be run in parallel. By\n   * default, as many as possible.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback. Results are always returned; however, if an\n   * error occurs, no further `tasks` will be performed, and the results object\n   * will only contain partial results. Invoked with (err, results).\n   * @returns undefined\n   * @example\n   *\n   * async.auto({\n   *     // this function will just be passed a callback\n   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n   *     showData: ['readData', function(results, cb) {\n   *         // results.readData is the file's contents\n   *         // ...\n   *     }]\n   * }, callback);\n   *\n   * async.auto({\n   *     get_data: function(callback) {\n   *         console.log('in get_data');\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         console.log('in make_folder');\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         console.log('in write_file', JSON.stringify(results));\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         console.log('in email_link', JSON.stringify(results));\n   *         // once the file is written let's email a link to it...\n   *         // results.write_file contains the filename returned by write_file.\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('results = ', results);\n   * });\n   */\n\n\n  var auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n      // concurrency is optional, shift the args.\n      callback = concurrency;\n      concurrency = null;\n    }\n\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n\n    if (!numTasks) {\n      return callback(null);\n    }\n\n    if (!concurrency) {\n      concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n    var listeners = Object.create(null);\n    var readyTasks = []; // for cycle detection:\n\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n\n    var uncheckedDependencies = {};\n    baseForOwn(tasks, function (task, key) {\n      if (!isArray(task)) {\n        // no dependencies\n        enqueueTask(key, [task]);\n        readyToCheck.push(key);\n        return;\n      }\n\n      var dependencies = task.slice(0, task.length - 1);\n      var remainingDependencies = dependencies.length;\n\n      if (remainingDependencies === 0) {\n        enqueueTask(key, task);\n        readyToCheck.push(key);\n        return;\n      }\n\n      uncheckedDependencies[key] = remainingDependencies;\n      arrayEach(dependencies, function (dependencyName) {\n        if (!tasks[dependencyName]) {\n          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n        }\n\n        addListener(dependencyName, function () {\n          remainingDependencies--;\n\n          if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n          }\n        });\n      });\n    });\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n      readyTasks.push(function () {\n        runTask(key, task);\n      });\n    }\n\n    function processQueue() {\n      if (readyTasks.length === 0 && runningTasks === 0) {\n        return callback(null, results);\n      }\n\n      while (readyTasks.length && runningTasks < concurrency) {\n        var run = readyTasks.shift();\n        run();\n      }\n    }\n\n    function addListener(taskName, fn) {\n      var taskListeners = listeners[taskName];\n\n      if (!taskListeners) {\n        taskListeners = listeners[taskName] = [];\n      }\n\n      taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n      var taskListeners = listeners[taskName] || [];\n      arrayEach(taskListeners, function (fn) {\n        fn();\n      });\n      processQueue();\n    }\n\n    function runTask(key, task) {\n      if (hasError) return;\n      var taskCallback = onlyOnce(function (err, result) {\n        runningTasks--;\n\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n\n        if (err) {\n          var safeResults = {};\n          baseForOwn(results, function (val, rkey) {\n            safeResults[rkey] = val;\n          });\n          safeResults[key] = result;\n          hasError = true;\n          listeners = Object.create(null);\n          callback(err, safeResults);\n        } else {\n          results[key] = result;\n          taskComplete(key);\n        }\n      });\n      runningTasks++;\n      var taskFn = wrapAsync(task[task.length - 1]);\n\n      if (task.length > 1) {\n        taskFn(results, taskCallback);\n      } else {\n        taskFn(taskCallback);\n      }\n    }\n\n    function checkForDeadlocks() {\n      // Kahn's algorithm\n      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n      var currentTask;\n      var counter = 0;\n\n      while (readyToCheck.length) {\n        currentTask = readyToCheck.pop();\n        counter++;\n        arrayEach(getDependents(currentTask), function (dependent) {\n          if (--uncheckedDependencies[dependent] === 0) {\n            readyToCheck.push(dependent);\n          }\n        });\n      }\n\n      if (counter !== numTasks) {\n        throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n      }\n    }\n\n    function getDependents(taskName) {\n      var result = [];\n      baseForOwn(tasks, function (task, key) {\n        if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n          result.push(key);\n        }\n      });\n      return result;\n    }\n  };\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n\n\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n\n    return result;\n  }\n  /** `Object#toString` result references. */\n\n\n  var symbolTag = '[object Symbol]';\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n\n  function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n  /** Used as references for various `Number` constants. */\n\n\n  var INFINITY = 1 / 0;\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\n  var symbolToString = symbolProto ? symbolProto.toString : undefined;\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * The base implementation of `_.slice` without an iteratee call guard.\n   *\n   * @private\n   * @param {Array} array The array to slice.\n   * @param {number} [start=0] The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the slice of `array`.\n   */\n\n\n  function baseSlice(array, start, end) {\n    var index = -1,\n        length = array.length;\n\n    if (start < 0) {\n      start = -start > length ? 0 : length + start;\n    }\n\n    end = end > length ? length : end;\n\n    if (end < 0) {\n      end += length;\n    }\n\n    length = start > end ? 0 : end - start >>> 0;\n    start >>>= 0;\n    var result = Array(length);\n\n    while (++index < length) {\n      result[index] = array[index + start];\n    }\n\n    return result;\n  }\n  /**\n   * Casts `array` to a slice if it's needed.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {number} start The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the cast slice.\n   */\n\n\n  function castSlice(array, start, end) {\n    var length = array.length;\n    end = end === undefined ? length : end;\n    return !start && end >= length ? array : baseSlice(array, start, end);\n  }\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n\n\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n    return index;\n  }\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n\n\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n    return index;\n  }\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n\n\n  function asciiToArray(string) {\n    return string.split('');\n  }\n  /** Used to compose unicode character classes. */\n\n\n  var rsAstralRange = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\n  var rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0';\n  var rsVarRange = '\\\\ufe0e\\\\ufe0f';\n  /** Used to compose unicode capture groups. */\n\n  var rsZWJ = '\\\\u200d';\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n  /** Used to compose unicode character classes. */\n\n\n  var rsAstralRange$1 = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange$1 = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\n  var rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20f0';\n  var rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n  /** Used to compose unicode capture groups. */\n\n  var rsAstral = '[' + rsAstralRange$1 + ']';\n  var rsCombo = '[' + rsComboMarksRange$1 + rsComboSymbolsRange$1 + ']';\n  var rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\n  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\n  var rsNonAstral = '[^' + rsAstralRange$1 + ']';\n  var rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\n  var rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\n  var rsZWJ$1 = '\\\\u200d';\n  /** Used to compose unicode regexes. */\n\n  var reOptMod = rsModifier + '?';\n  var rsOptVar = '[' + rsVarRange$1 + ']?';\n  var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\n  var rsSeq = rsOptVar + reOptMod + rsOptJoin;\n  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n\n\n  function stringToArray(string) {\n    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n  }\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n\n\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n  /** Used to match leading and trailing whitespace. */\n\n\n  var reTrim = /^\\s+|\\s+$/g;\n  /**\n   * Removes leading and trailing whitespace or specified characters from `string`.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category String\n   * @param {string} [string=''] The string to trim.\n   * @param {string} [chars=whitespace] The characters to trim.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {string} Returns the trimmed string.\n   * @example\n   *\n   * _.trim('  abc  ');\n   * // => 'abc'\n   *\n   * _.trim('-_-abc-_-', '_-');\n   * // => 'abc'\n   *\n   * _.map(['  foo  ', '  bar  '], _.trim);\n   * // => ['foo', 'bar']\n   */\n\n  function trim(string, chars, guard) {\n    string = toString(string);\n\n    if (string && (guard || chars === undefined)) {\n      return string.replace(reTrim, '');\n    }\n\n    if (!string || !(chars = baseToString(chars))) {\n      return string;\n    }\n\n    var strSymbols = stringToArray(string),\n        chrSymbols = stringToArray(chars),\n        start = charsStartIndex(strSymbols, chrSymbols),\n        end = charsEndIndex(strSymbols, chrSymbols) + 1;\n    return castSlice(strSymbols, start, end).join('');\n  }\n\n  var FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n  var FN_ARG_SPLIT = /,/;\n  var FN_ARG = /(=.+)?(\\s*)$/;\n  var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n  function parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg) {\n      return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n  }\n  /**\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n   * tasks are specified as parameters to the function, after the usual callback\n   * parameter, with the parameter names matching the names of the tasks it\n   * depends on. This can provide even more readable task graphs which can be\n   * easier to maintain.\n   *\n   * If a final callback is specified, the task results are similarly injected,\n   * specified as named parameters after the initial error parameter.\n   *\n   * The autoInject function is purely syntactic sugar and its semantics are\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n   *\n   * @name autoInject\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.auto]{@link module:ControlFlow.auto}\n   * @category Control Flow\n   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n   * the form 'func([dependencies...], callback). The object's key of a property\n   * serves as the name of the task defined by that property, i.e. can be used\n   * when specifying requirements for other tasks.\n   * * The `callback` parameter is a `callback(err, result)` which must be called\n   *   when finished, passing an `error` (which can be `null`) and the result of\n   *   the function's execution. The remaining parameters name other tasks on\n   *   which the task is dependent, and the results from those tasks are the\n   *   arguments of those parameters.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback, and a `results` object with any completed\n   * task results, similar to `auto`.\n   * @example\n   *\n   * //  The example from `auto` can be rewritten as follows:\n   * async.autoInject({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: function(get_data, make_folder, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     },\n   *     email_link: function(write_file, callback) {\n   *         // once the file is written let's email a link to it...\n   *         // write_file contains the filename returned by write_file.\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   *\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\n   * // will not work with plain functions, since the parameter names will be\n   * // collapsed to a single letter identifier.  To work around this, you can\n   * // explicitly specify the names of the parameters your task function needs\n   * // in an array, similar to Angular.js dependency injection.\n   *\n   * // This still has an advantage over plain `auto`, since the results a task\n   * // depends on are still spread into arguments.\n   * async.autoInject({\n   *     //...\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(write_file, callback) {\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }]\n   *     //...\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   */\n\n\n  function autoInject(tasks, callback) {\n    var newTasks = {};\n    baseForOwn(tasks, function (taskFn, key) {\n      var params;\n      var fnIsAsync = isAsync(taskFn);\n      var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n\n      if (isArray(taskFn)) {\n        params = taskFn.slice(0, -1);\n        taskFn = taskFn[taskFn.length - 1];\n        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n      } else if (hasNoDeps) {\n        // no dependencies, use the function as-is\n        newTasks[key] = taskFn;\n      } else {\n        params = parseParams(taskFn);\n\n        if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n          throw new Error(\"autoInject task functions require explicit parameters.\");\n        } // remove callback param\n\n\n        if (!fnIsAsync) params.pop();\n        newTasks[key] = params.concat(newTask);\n      }\n\n      function newTask(results, taskCb) {\n        var newArgs = arrayMap(params, function (name) {\n          return results[name];\n        });\n        newArgs.push(taskCb);\n        wrapAsync(taskFn).apply(null, newArgs);\n      }\n    });\n    auto(newTasks, callback);\n  } // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n  // used for queues. This implementation assumes that the node provided by the user can be modified\n  // to adjust the next and last properties. We implement only the minimal functionality\n  // for queue support.\n\n\n  function DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n  }\n\n  function setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n  }\n\n  DLL.prototype.removeLink = function (node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n  };\n\n  DLL.prototype.empty = function () {\n    while (this.head) this.shift();\n\n    return this;\n  };\n\n  DLL.prototype.insertAfter = function (node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n  };\n\n  DLL.prototype.insertBefore = function (node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n  };\n\n  DLL.prototype.unshift = function (node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n  };\n\n  DLL.prototype.push = function (node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n  };\n\n  DLL.prototype.shift = function () {\n    return this.head && this.removeLink(this.head);\n  };\n\n  DLL.prototype.pop = function () {\n    return this.tail && this.removeLink(this.tail);\n  };\n\n  DLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n\n    for (var idx = 0; idx < this.length; idx++) {\n      arr[idx] = curr.data;\n      curr = curr.next;\n    }\n\n    return arr;\n  };\n\n  DLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n\n    while (!!curr) {\n      var next = curr.next;\n\n      if (testFn(curr)) {\n        this.removeLink(curr);\n      }\n\n      curr = next;\n    }\n\n    return this;\n  };\n\n  function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n      concurrency = 1;\n    } else if (concurrency === 0) {\n      throw new Error('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n\n    var numRunning = 0;\n    var workersList = [];\n\n    function _insert(data, insertAtFront, callback) {\n      if (callback != null && typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n\n      q.started = true;\n\n      if (!isArray(data)) {\n        data = [data];\n      }\n\n      if (data.length === 0 && q.idle()) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          callback: callback || noop\n        };\n\n        if (insertAtFront) {\n          q._tasks.unshift(item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n\n      setImmediate$1(q.process);\n    }\n\n    function _next(tasks) {\n      return function (err) {\n        numRunning -= 1;\n\n        for (var i = 0, l = tasks.length; i < l; i++) {\n          var task = tasks[i];\n          var index = baseIndexOf(workersList, task, 0);\n\n          if (index >= 0) {\n            workersList.splice(index, 1);\n          }\n\n          task.callback.apply(task, arguments);\n\n          if (err != null) {\n            q.error(err, task.data);\n          }\n        }\n\n        if (numRunning <= q.concurrency - q.buffer) {\n          q.unsaturated();\n        }\n\n        if (q.idle()) {\n          q.drain();\n        }\n\n        q.process();\n      };\n    }\n\n    var isProcessing = false;\n    var q = {\n      _tasks: new DLL(),\n      concurrency: concurrency,\n      payload: payload,\n      saturated: noop,\n      unsaturated: noop,\n      buffer: concurrency / 4,\n      empty: noop,\n      drain: noop,\n      error: noop,\n      started: false,\n      paused: false,\n      push: function (data, callback) {\n        _insert(data, false, callback);\n      },\n      kill: function () {\n        q.drain = noop;\n\n        q._tasks.empty();\n      },\n      unshift: function (data, callback) {\n        _insert(data, true, callback);\n      },\n      remove: function (testFn) {\n        q._tasks.remove(testFn);\n      },\n      process: function () {\n        // Avoid trying to start too many processing operations. This can occur\n        // when callbacks resolve synchronously (#1267).\n        if (isProcessing) {\n          return;\n        }\n\n        isProcessing = true;\n\n        while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n          var tasks = [],\n              data = [];\n          var l = q._tasks.length;\n          if (q.payload) l = Math.min(l, q.payload);\n\n          for (var i = 0; i < l; i++) {\n            var node = q._tasks.shift();\n\n            tasks.push(node);\n            workersList.push(node);\n            data.push(node.data);\n          }\n\n          numRunning += 1;\n\n          if (q._tasks.length === 0) {\n            q.empty();\n          }\n\n          if (numRunning === q.concurrency) {\n            q.saturated();\n          }\n\n          var cb = onlyOnce(_next(tasks));\n\n          _worker(data, cb);\n        }\n\n        isProcessing = false;\n      },\n      length: function () {\n        return q._tasks.length;\n      },\n      running: function () {\n        return numRunning;\n      },\n      workersList: function () {\n        return workersList;\n      },\n      idle: function () {\n        return q._tasks.length + numRunning === 0;\n      },\n      pause: function () {\n        q.paused = true;\n      },\n      resume: function () {\n        if (q.paused === false) {\n          return;\n        }\n\n        q.paused = false;\n        setImmediate$1(q.process);\n      }\n    };\n    return q;\n  }\n  /**\n   * A cargo of tasks for the worker function to complete. Cargo inherits all of\n   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n   * @typedef {Object} CargoObject\n   * @memberOf module:ControlFlow\n   * @property {Function} length - A function returning the number of items\n   * waiting to be processed. Invoke like `cargo.length()`.\n   * @property {number} payload - An `integer` for determining how many tasks\n   * should be process per round. This property can be changed after a `cargo` is\n   * created to alter the payload on-the-fly.\n   * @property {Function} push - Adds `task` to the `queue`. The callback is\n   * called once the `worker` has finished processing the task. Instead of a\n   * single task, an array of `tasks` can be submitted. The respective callback is\n   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n   * @property {Function} saturated - A callback that is called when the\n   * `queue.length()` hits the concurrency and further tasks will be queued.\n   * @property {Function} empty - A callback that is called when the last item\n   * from the `queue` is given to a `worker`.\n   * @property {Function} drain - A callback that is called when the last item\n   * from the `queue` has returned from the `worker`.\n   * @property {Function} idle - a function returning false if there are items\n   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n   * @property {Function} pause - a function that pauses the processing of tasks\n   * until `resume()` is called. Invoke like `cargo.pause()`.\n   * @property {Function} resume - a function that resumes the processing of\n   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n   * @property {Function} kill - a function that removes the `drain` callback and\n   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n   */\n\n  /**\n   * Creates a `cargo` object with the specified payload. Tasks added to the\n   * cargo will be processed altogether (up to the `payload` limit). If the\n   * `worker` is in progress, the task is queued until it becomes available. Once\n   * the `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, cargo passes an array of tasks to a single worker, repeating\n   * when the worker is finished.\n   *\n   * @name cargo\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargo and inner queue.\n   * @example\n   *\n   * // create a cargo object with payload 2\n   * var cargo = async.cargo(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2);\n   *\n   * // add some items\n   * cargo.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargo.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * cargo.push({name: 'baz'}, function(err) {\n   *     console.log('finished processing baz');\n   * });\n   */\n\n\n  function cargo(worker, payload) {\n    return queue(worker, 1, payload);\n  }\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n   *\n   * @name eachOfSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  var eachOfSeries = doLimit(eachOfLimit, 1);\n  /**\n   * Reduces `coll` into a single value using an async `iteratee` to return each\n   * successive step. `memo` is the initial state of the reduction. This function\n   * only operates in series.\n   *\n   * For performance reasons, it may make sense to split a call to this function\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n   * results. This function is for situations where each step in the reduction\n   * needs to be async; if you can get the data before reducing it, then it's\n   * probably a good idea to do so.\n   *\n   * @name reduce\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias inject\n   * @alias foldl\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee complete with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @example\n   *\n   * async.reduce([1,2,3], 0, function(memo, item, callback) {\n   *     // pointless async:\n   *     process.nextTick(function() {\n   *         callback(null, memo + item)\n   *     });\n   * }, function(err, result) {\n   *     // result is now equal to the last value of memo, which is 6\n   * });\n   */\n\n  function reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOfSeries(coll, function (x, i, callback) {\n      _iteratee(memo, x, function (err, v) {\n        memo = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, memo);\n    });\n  }\n  /**\n   * Version of the compose function that is more natural to read. Each function\n   * consumes the return value of the previous function. It is the equivalent of\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name seq\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.compose]{@link module:ControlFlow.compose}\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} a function that composes the `functions` in order\n   * @example\n   *\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\n   * // Part of an app, that fetches cats of the logged user.\n   * // This example uses `seq` function to avoid overnesting and error\n   * // handling clutter.\n   * app.get('/cats', function(request, response) {\n   *     var User = request.models.User;\n   *     async.seq(\n   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n   *         function(user, fn) {\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n   *         }\n   *     )(req.session.user_id, function (err, cats) {\n   *         if (err) {\n   *             console.error(err);\n   *             response.json({ status: 'error', message: err.message });\n   *         } else {\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n   *         }\n   *     });\n   * });\n   */\n\n\n  function seq()\n  /*...functions*/\n  {\n    var _functions = arrayMap(arguments, wrapAsync);\n\n    return function ()\n    /*...args*/\n    {\n      var args = slice(arguments);\n      var that = this;\n      var cb = args[args.length - 1];\n\n      if (typeof cb == 'function') {\n        args.pop();\n      } else {\n        cb = noop;\n      }\n\n      reduce(_functions, args, function (newargs, fn, cb) {\n        fn.apply(that, newargs.concat(function (err\n        /*, ...nextargs*/\n        ) {\n          var nextargs = slice(arguments, 1);\n          cb(err, nextargs);\n        }));\n      }, function (err, results) {\n        cb.apply(that, [err].concat(results));\n      });\n    };\n  }\n  /**\n   * Creates a function which is a composition of the passed asynchronous\n   * functions. Each function consumes the return value of the function that\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name compose\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} an asynchronous function that is the composed\n   * asynchronous `functions`\n   * @example\n   *\n   * function add1(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n + 1);\n   *     }, 10);\n   * }\n   *\n   * function mul3(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n * 3);\n   *     }, 10);\n   * }\n   *\n   * var add1mul3 = async.compose(mul3, add1);\n   * add1mul3(4, function (err, result) {\n   *     // result now equals 15\n   * });\n   */\n\n\n  var compose = function ()\n  /*...args*/\n  {\n    return seq.apply(null, slice(arguments).reverse());\n  };\n\n  var _concat = Array.prototype.concat;\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name concatLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   */\n\n  var concatLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err\n      /*, ...args*/\n      ) {\n        if (err) return callback(err);\n        return callback(null, slice(arguments, 1));\n      });\n    }, function (err, mapResults) {\n      var result = [];\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          result = _concat.apply(result, mapResults[i]);\n        }\n      }\n\n      return callback(err, result);\n    });\n  };\n  /**\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n   * the concatenated list. The `iteratee`s are called in parallel, and the\n   * results are concatenated as they return. There is no guarantee that the\n   * results array will be returned in the original order of `coll` passed to the\n   * `iteratee` function.\n   *\n   * @name concat\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback(err)] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @example\n   *\n   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n   *     // files is now a list of filenames that exist in the 3 directories\n   * });\n   */\n\n\n  var concat = doLimit(concatLimit, Infinity);\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n   *\n   * @name concatSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n   * The iteratee should complete with an array an array of results.\n   * Invoked with (item, callback).\n   * @param {Function} [callback(err)] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   */\n\n  var concatSeries = doLimit(concatLimit, 1);\n  /**\n   * Returns a function that when called, calls-back with the values provided.\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n   * [`auto`]{@link module:ControlFlow.auto}.\n   *\n   * @name constant\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\n   * callback with.\n   * @returns {AsyncFunction} Returns a function that when invoked, automatically\n   * invokes the callback with the previous given arguments.\n   * @example\n   *\n   * async.waterfall([\n   *     async.constant(42),\n   *     function (value, next) {\n   *         // value === 42\n   *     },\n   *     //...\n   * ], callback);\n   *\n   * async.waterfall([\n   *     async.constant(filename, \"utf8\"),\n   *     fs.readFile,\n   *     function (fileData, next) {\n   *         //...\n   *     }\n   *     //...\n   * ], callback);\n   *\n   * async.auto({\n   *     hostname: async.constant(\"https://server.net/\"),\n   *     port: findFreePort,\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n   *         startServer(options, cb);\n   *     }],\n   *     //...\n   * }, callback);\n   */\n\n  var constant = function ()\n  /*...values*/\n  {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function ()\n    /*...ignoredArgs, callback*/\n    {\n      var callback = arguments[arguments.length - 1];\n      return callback.apply(this, args);\n    };\n  };\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n\n\n  function identity(value) {\n    return value;\n  }\n\n  function _createTester(check, getResult) {\n    return function (eachfn, arr, iteratee, cb) {\n      cb = cb || noop;\n      var testPassed = false;\n      var testResult;\n      eachfn(arr, function (value, _, callback) {\n        iteratee(value, function (err, result) {\n          if (err) {\n            callback(err);\n          } else if (check(result) && !testResult) {\n            testPassed = true;\n            testResult = getResult(true, value);\n            callback(null, breakLoop);\n          } else {\n            callback();\n          }\n        });\n      }, function (err) {\n        if (err) {\n          cb(err);\n        } else {\n          cb(null, testPassed ? testResult : getResult(false));\n        }\n      });\n    };\n  }\n\n  function _findGetResult(v, x) {\n    return x;\n  }\n  /**\n   * Returns the first value in `coll` that passes an async truth test. The\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\n   * `true` will fire the detect `callback` with that result. That means the\n   * result might not be the first item in the original `coll` (in terms of order)\n   * that passes the test.\n  \n   * If order within the original `coll` is important, then look at\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\n   *\n   * @name detect\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias find\n   * @category Collections\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @example\n   *\n   * async.detect(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, result) {\n   *     // result now equals the first file in the list that exists\n   * });\n   */\n\n\n  var detect = doParallel(_createTester(identity, _findGetResult));\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name detectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findLimit\n   * @category Collections\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   */\n\n  var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n   *\n   * @name detectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findSeries\n   * @category Collections\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   */\n\n  var detectSeries = doLimit(detectLimit, 1);\n\n  function consoleFunc(name) {\n    return function (fn\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      args.push(function (err\n      /*, ...args*/\n      ) {\n        var args = slice(arguments, 1);\n\n        if (typeof console === 'object') {\n          if (err) {\n            if (console.error) {\n              console.error(err);\n            }\n          } else if (console[name]) {\n            arrayEach(args, function (x) {\n              console[name](x);\n            });\n          }\n        }\n      });\n      wrapAsync(fn).apply(null, args);\n    };\n  }\n  /**\n   * Logs the result of an [`async` function]{@link AsyncFunction} to the\n   * `console` using `console.dir` to display the properties of the resulting object.\n   * Only works in Node.js or in browsers that support `console.dir` and\n   * `console.error` (such as FF and Chrome).\n   * If multiple arguments are returned from the async function,\n   * `console.dir` is called on each argument in order.\n   *\n   * @name dir\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, {hello: name});\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.dir(hello, 'world');\n   * {hello: 'world'}\n   */\n\n\n  var dir = consoleFunc('dir');\n  /**\n   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n   * the order of operations, the arguments `test` and `fn` are switched.\n   *\n   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n   * @name doDuring\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.during]{@link module:ControlFlow.during}\n   * @category Control Flow\n   * @param {AsyncFunction} fn - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `fn`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `fn` has stopped. `callback`\n   * will be passed an error if one occurred, otherwise `null`.\n   */\n\n  function doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _fn = wrapAsync(fn);\n\n    var _test = wrapAsync(test);\n\n    function next(err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      args.push(check);\n\n      _test.apply(this, args);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n\n      _fn(next);\n    }\n\n    check(null, true);\n  }\n  /**\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n   * the order of operations, the arguments `test` and `iteratee` are switched.\n   *\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n   *\n   * @name doWhilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - A function which is called each time `test`\n   * passes. Invoked with (callback).\n   * @param {Function} test - synchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with any non-error callback results of\n   * `iteratee`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped.\n   * `callback` will be passed an error and any arguments passed to the final\n   * `iteratee`'s callback. Invoked with (err, [results]);\n   */\n\n\n  function doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    var next = function (err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      if (test.apply(this, args)) return _iteratee(next);\n      callback.apply(null, [null].concat(args));\n    };\n\n    _iteratee(next);\n  }\n  /**\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n   * argument ordering differs from `until`.\n   *\n   * @name doUntil\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {Function} test - synchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with any non-error callback results of\n   * `iteratee`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   */\n\n\n  function doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function () {\n      return !test.apply(this, arguments);\n    }, callback);\n  }\n  /**\n   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n   * is passed a callback in the form of `function (err, truth)`. If error is\n   * passed to `test` or `fn`, the main callback is immediately called with the\n   * value of the error.\n   *\n   * @name during\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `fn`. Invoked with (callback).\n   * @param {AsyncFunction} fn - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `fn` has stopped. `callback`\n   * will be passed an error, if one occurred, otherwise `null`.\n   * @example\n   *\n   * var count = 0;\n   *\n   * async.during(\n   *     function (callback) {\n   *         return callback(null, count < 5);\n   *     },\n   *     function (callback) {\n   *         count++;\n   *         setTimeout(callback, 1000);\n   *     },\n   *     function (err) {\n   *         // 5 seconds have passed\n   *     }\n   * );\n   */\n\n\n  function during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _fn = wrapAsync(fn);\n\n    var _test = wrapAsync(test);\n\n    function next(err) {\n      if (err) return callback(err);\n\n      _test(check);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n\n      _fn(next);\n    }\n\n    _test(check);\n  }\n\n  function _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n      return iteratee(value, callback);\n    };\n  }\n  /**\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\n   * The `iteratee` is called with an item from the list, and a callback for when\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\n   * main `callback` (for the `each` function) is immediately called with the\n   * error.\n   *\n   * Note, that since this function applies `iteratee` to each item in parallel,\n   * there is no guarantee that the iteratee functions will complete in order.\n   *\n   * @name each\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEach\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to\n   * each item in `coll`. Invoked with (item, callback).\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOf`.\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @example\n   *\n   * // assuming openFiles is an array of file names and saveFile is a function\n   * // to save the modified contents of that file:\n   *\n   * async.each(openFiles, saveFile, function(err){\n   *   // if any of the saves produced an error, err would equal that error\n   * });\n   *\n   * // assuming openFiles is an array of file names\n   * async.each(openFiles, function(file, callback) {\n   *\n   *     // Perform operation on file here.\n   *     console.log('Processing file ' + file);\n   *\n   *     if( file.length > 32 ) {\n   *       console.log('This file name is too long');\n   *       callback('File name too long');\n   *     } else {\n   *       // Do work to process file here\n   *       console.log('File processed');\n   *       callback();\n   *     }\n   * }, function(err) {\n   *     // if any of the file processing produced an error, err would equal that error\n   *     if( err ) {\n   *       // One of the iterations produced an error.\n   *       // All processing will now stop.\n   *       console.log('A file failed to process');\n   *     } else {\n   *       console.log('All files have been processed successfully');\n   *     }\n   * });\n   */\n\n\n  function eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name eachLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfLimit`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  function eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n   *\n   * @name eachSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfSeries`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  var eachSeries = doLimit(eachLimit$1, 1);\n  /**\n   * Wrap an async function and ensure it calls its callback on a later tick of\n   * the event loop.  If the function already calls its callback on a next tick,\n   * no extra deferral is added. This is useful for preventing stack overflows\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n   * contained. ES2017 `async` functions are returned as-is -- they are immune\n   * to Zalgo's corrupting influences, as they always resolve on a later tick.\n   *\n   * @name ensureAsync\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - an async function, one that expects a node-style\n   * callback as its last argument.\n   * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n   * signature as the function passed in.\n   * @example\n   *\n   * function sometimesAsync(arg, callback) {\n   *     if (cache[arg]) {\n   *         return callback(null, cache[arg]); // this would be synchronous!!\n   *     } else {\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\n   *     }\n   * }\n   *\n   * // this has a risk of stack overflows if many results are cached in a row\n   * async.mapSeries(args, sometimesAsync, done);\n   *\n   * // this will defer sometimesAsync's callback if necessary,\n   * // preventing stack overflows\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n   */\n\n  function ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n      var sync = true;\n      args.push(function () {\n        var innerArgs = arguments;\n\n        if (sync) {\n          setImmediate$1(function () {\n            callback.apply(null, innerArgs);\n          });\n        } else {\n          callback.apply(null, innerArgs);\n        }\n      });\n      fn.apply(this, args);\n      sync = false;\n    });\n  }\n\n  function notId(v) {\n    return !v;\n  }\n  /**\n   * Returns `true` if every element in `coll` satisfies an async test. If any\n   * iteratee call returns `false`, the main `callback` is immediately called.\n   *\n   * @name every\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias all\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @example\n   *\n   * async.every(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, result) {\n   *     // if result is true then every file exists\n   * });\n   */\n\n\n  var every = doParallel(_createTester(notId, notId));\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name everyLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   */\n\n  var everyLimit = doParallelLimit(_createTester(notId, notId));\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n   *\n   * @name everySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in series.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   */\n\n  var everySeries = doLimit(everyLimit, 1);\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  function filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        truthValues[index] = !!v;\n        callback(err);\n      });\n    }, function (err) {\n      if (err) return callback(err);\n      var results = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (truthValues[i]) results.push(arr[i]);\n      }\n\n      callback(null, results);\n    });\n  }\n\n  function filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        if (err) {\n          callback(err);\n        } else {\n          if (v) {\n            results.push({\n              index: index,\n              value: x\n            });\n          }\n\n          callback();\n        }\n      });\n    }, function (err) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, arrayMap(results.sort(function (a, b) {\n          return a.index - b.index;\n        }), baseProperty('value')));\n      }\n    });\n  }\n\n  function _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n  }\n  /**\n   * Returns a new array of all the values in `coll` which pass an async truth\n   * test. This operation is performed in parallel, but the results array will be\n   * in the same order as the original.\n   *\n   * @name filter\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias select\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @example\n   *\n   * async.filter(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, results) {\n   *     // results now equals an array of the existing files\n   * });\n   */\n\n\n  var filter = doParallel(_filter);\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name filterLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   */\n\n  var filterLimit = doParallelLimit(_filter);\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n   *\n   * @name filterSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results)\n   */\n\n  var filterSeries = doLimit(filterLimit, 1);\n  /**\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\n   * to call itself again, in series, indefinitely.\n  \n   * If an error is passed to the callback then `errback` is called with the\n   * error, and execution stops, otherwise it will never be called.\n   *\n   * @name forever\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} fn - an async function to call repeatedly.\n   * Invoked with (next).\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\n   * this function will be called, and execution stops. Invoked with (err).\n   * @example\n   *\n   * async.forever(\n   *     function(next) {\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\n   *         // it will result in this function being called again.\n   *     },\n   *     function(err) {\n   *         // if next is called with a value in its first parameter, it will appear\n   *         // in here as 'err', and execution will stop.\n   *     }\n   * );\n   */\n\n  function forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n      if (err) return done(err);\n      task(next);\n    }\n\n    next();\n  }\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name groupByLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   */\n\n\n  var groupByLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err, key) {\n        if (err) return callback(err);\n        return callback(null, {\n          key: key,\n          val: val\n        });\n      });\n    }, function (err, mapResults) {\n      var result = {}; // from MDN, handle object having an `hasOwnProperty` prop\n\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          var key = mapResults[i].key;\n          var val = mapResults[i].val;\n\n          if (hasOwnProperty.call(result, key)) {\n            result[key].push(val);\n          } else {\n            result[key] = [val];\n          }\n        }\n      }\n\n      return callback(err, result);\n    });\n  };\n  /**\n   * Returns a new object, where each value corresponds to an array of items, from\n   * `coll`, that returned the corresponding key. That is, the keys of the object\n   * correspond to the values passed to the `iteratee` callback.\n   *\n   * Note: Since this function applies the `iteratee` to each item in parallel,\n   * there is no guarantee that the `iteratee` functions will complete in order.\n   * However, the values for each key in the `result` will be in the same order as\n   * the original `coll`. For Objects, the values will roughly be in the order of\n   * the original Objects' keys (but this can vary across JavaScript engines).\n   *\n   * @name groupBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @example\n   *\n   * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n   *     db.findById(userId, function(err, user) {\n   *         if (err) return callback(err);\n   *         return callback(null, user.age);\n   *     });\n   * }, function(err, result) {\n   *     // result is object containing the userIds grouped by age\n   *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n   * });\n   */\n\n\n  var groupBy = doLimit(groupByLimit, Infinity);\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n   *\n   * @name groupBySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   */\n\n  var groupBySeries = doLimit(groupByLimit, 1);\n  /**\n   * Logs the result of an `async` function to the `console`. Only works in\n   * Node.js or in browsers that support `console.log` and `console.error` (such\n   * as FF and Chrome). If multiple arguments are returned from the async\n   * function, `console.log` is called on each argument in order.\n   *\n   * @name log\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, 'hello ' + name);\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.log(hello, 'world');\n   * 'hello world'\n   */\n\n  var log = consoleFunc('log');\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name mapValuesLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   */\n\n  function mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOfLimit(obj, limit, function (val, key, next) {\n      _iteratee(val, key, function (err, result) {\n        if (err) return next(err);\n        newObj[key] = result;\n        next();\n      });\n    }, function (err) {\n      callback(err, newObj);\n    });\n  }\n  /**\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n   *\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\n   * callback for when it has finished processing. Each of these callbacks takes\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n   * passes an error to its callback, the main `callback` (for the `mapValues`\n   * function) is immediately called with the error.\n   *\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\n   * be roughly in the order they complete, (but this is very engine-specific)\n   *\n   * @name mapValues\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @example\n   *\n   * async.mapValues({\n   *     f1: 'file1',\n   *     f2: 'file2',\n   *     f3: 'file3'\n   * }, function (file, key, callback) {\n   *   fs.stat(file, callback);\n   * }, function(err, result) {\n   *     // result is now a map of stats for each file, e.g.\n   *     // {\n   *     //     f1: [stats for file1],\n   *     //     f2: [stats for file2],\n   *     //     f3: [stats for file3]\n   *     // }\n   * });\n   */\n\n\n  var mapValues = doLimit(mapValuesLimit, Infinity);\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n   *\n   * @name mapValuesSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   */\n\n  var mapValuesSeries = doLimit(mapValuesLimit, 1);\n\n  function has(obj, key) {\n    return key in obj;\n  }\n  /**\n   * Caches the results of an async function. When creating a hash to store\n   * function results against, the callback is omitted from the hash and an\n   * optional hash function can be used.\n   *\n   * If no hash function is specified, the first argument is used as a hash key,\n   * which may work reasonably if it is a string or a data type that converts to a\n   * distinct string. Note that objects and arrays will not behave reasonably.\n   * Neither will cases where the other arguments are significant. In such cases,\n   * specify your own hash function.\n   *\n   * The cache of results is exposed as the `memo` property of the function\n   * returned by `memoize`.\n   *\n   * @name memoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n   * @param {Function} hasher - An optional function for generating a custom hash\n   * for storing results. It has all the arguments applied to it apart from the\n   * callback, and must be synchronous.\n   * @returns {AsyncFunction} a memoized version of `fn`\n   * @example\n   *\n   * var slow_fn = function(name, callback) {\n   *     // do something\n   *     callback(null, result);\n   * };\n   * var fn = async.memoize(slow_fn);\n   *\n   * // fn can now be used as if it were slow_fn\n   * fn('some name', function() {\n   *     // callback\n   * });\n   */\n\n\n  function memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n\n    var _fn = wrapAsync(fn);\n\n    var memoized = initialParams(function memoized(args, callback) {\n      var key = hasher.apply(null, args);\n\n      if (has(memo, key)) {\n        setImmediate$1(function () {\n          callback.apply(null, memo[key]);\n        });\n      } else if (has(queues, key)) {\n        queues[key].push(callback);\n      } else {\n        queues[key] = [callback];\n\n        _fn.apply(null, args.concat(function ()\n        /*args*/\n        {\n          var args = slice(arguments);\n          memo[key] = args;\n          var q = queues[key];\n          delete queues[key];\n\n          for (var i = 0, l = q.length; i < l; i++) {\n            q[i].apply(null, args);\n          }\n        }));\n      }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n  }\n  /**\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\n   * calls `setImmediate`.  In the browser it will use `setImmediate` if\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\n   * priority events may precede the execution of `callback`.\n   *\n   * This is used internally for browser-compatibility purposes.\n   *\n   * @name nextTick\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @alias setImmediate\n   * @category Util\n   * @param {Function} callback - The function to call on a later loop around\n   * the event loop. Invoked with (args...).\n   * @param {...*} args... - any number of additional arguments to pass to the\n   * callback on the next tick.\n   * @example\n   *\n   * var call_order = [];\n   * async.nextTick(function() {\n   *     call_order.push('two');\n   *     // call_order now equals ['one','two']\n   * });\n   * call_order.push('one');\n   *\n   * async.setImmediate(function (a, b, c) {\n   *     // a, b, and c equal 1, 2, and 3\n   * }, 1, 2, 3);\n   */\n\n\n  var _defer$1;\n\n  if (hasNextTick) {\n    _defer$1 = process.nextTick;\n  } else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n  } else {\n    _defer$1 = fallback;\n  }\n\n  var nextTick = wrap(_defer$1);\n\n  function _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n    eachfn(tasks, function (task, key, callback) {\n      wrapAsync(task)(function (err, result) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n\n        results[key] = result;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n  /**\n   * Run the `tasks` collection of functions in parallel, without waiting until\n   * the previous function has completed. If any of the functions pass an error to\n   * its callback, the main `callback` is immediately called with the value of the\n   * error. Once the `tasks` have completed, the results are passed to the final\n   * `callback` as an array.\n   *\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n   * parallel execution of code.  If your tasks do not use any timers or perform\n   * any I/O, they will actually be executed in series.  Any synchronous setup\n   * sections for each task will happen one after the other.  JavaScript remains\n   * single-threaded.\n   *\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n   * execution of other tasks when a task fails.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   * results from {@link async.parallel}.\n   *\n   * @name parallel\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   *\n   * @example\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // the results array will equal ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     // results is now equals to: {one: 1, two: 2}\n   * });\n   */\n\n\n  function parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n  }\n  /**\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name parallelLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   */\n\n\n  function parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n  }\n  /**\n   * A queue of tasks for the worker function to complete.\n   * @typedef {Object} QueueObject\n   * @memberOf module:ControlFlow\n   * @property {Function} length - a function returning the number of items\n   * waiting to be processed. Invoke with `queue.length()`.\n   * @property {boolean} started - a boolean indicating whether or not any\n   * items have been pushed and processed by the queue.\n   * @property {Function} running - a function returning the number of items\n   * currently being processed. Invoke with `queue.running()`.\n   * @property {Function} workersList - a function returning the array of items\n   * currently being processed. Invoke with `queue.workersList()`.\n   * @property {Function} idle - a function returning false if there are items\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n   * @property {number} concurrency - an integer for determining how many `worker`\n   * functions should be run in parallel. This property can be changed after a\n   * `queue` is created to alter the concurrency on-the-fly.\n   * @property {Function} push - add a new task to the `queue`. Calls `callback`\n   * once the `worker` has finished processing the task. Instead of a single task,\n   * a `tasks` array can be submitted. The respective callback is used for every\n   * task in the list. Invoke with `queue.push(task, [callback])`,\n   * @property {Function} unshift - add a new task to the front of the `queue`.\n   * Invoke with `queue.unshift(task, [callback])`.\n   * @property {Function} remove - remove items from the queue that match a test\n   * function.  The test function will be passed an object with a `data` property,\n   * and a `priority` property, if this is a\n   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n   * `function ({data, priority}) {}` and returns a Boolean.\n   * @property {Function} saturated - a callback that is called when the number of\n   * running workers hits the `concurrency` limit, and further tasks will be\n   * queued.\n   * @property {Function} unsaturated - a callback that is called when the number\n   * of running workers is less than the `concurrency` & `buffer` limits, and\n   * further tasks will not be queued.\n   * @property {number} buffer - A minimum threshold buffer in order to say that\n   * the `queue` is `unsaturated`.\n   * @property {Function} empty - a callback that is called when the last item\n   * from the `queue` is given to a `worker`.\n   * @property {Function} drain - a callback that is called when the last item\n   * from the `queue` has returned from the `worker`.\n   * @property {Function} error - a callback that is called when a task errors.\n   * Has the signature `function(error, task)`.\n   * @property {boolean} paused - a boolean for determining whether the queue is\n   * in a paused state.\n   * @property {Function} pause - a function that pauses the processing of tasks\n   * until `resume()` is called. Invoke with `queue.pause()`.\n   * @property {Function} resume - a function that resumes the processing of\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n   * @property {Function} kill - a function that removes the `drain` callback and\n   * empties remaining tasks from the queue forcing it to go idle. No more tasks\n   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n   */\n\n  /**\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\n   * `worker`s are in progress, the task is queued until one becomes available.\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\n   *\n   * @name queue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`. Invoked with (task, callback).\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the queue.\n   * @example\n   *\n   * // create a queue object with concurrency 2\n   * var q = async.queue(function(task, callback) {\n   *     console.log('hello ' + task.name);\n   *     callback();\n   * }, 2);\n   *\n   * // assign a callback\n   * q.drain = function() {\n   *     console.log('all items have been processed');\n   * };\n   *\n   * // add some items to the queue\n   * q.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * q.push({name: 'bar'}, function (err) {\n   *     console.log('finished processing bar');\n   * });\n   *\n   * // add some items to the queue (batch-wise)\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n   *     console.log('finished processing item');\n   * });\n   *\n   * // add some items to the front of the queue\n   * q.unshift({name: 'bar'}, function (err) {\n   *     console.log('finished processing bar');\n   * });\n   */\n\n\n  var queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n\n    return queue(function (items, cb) {\n      _worker(items[0], cb);\n    }, concurrency, 1);\n  };\n  /**\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n   * completed in ascending priority order.\n   *\n   * @name priorityQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`.\n   * Invoked with (task, callback).\n   * @param {number} concurrency - An `integer` for determining how many `worker`\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\n   * `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n   * differences between `queue` and `priorityQueue` objects:\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\n   * * The `unshift` method was removed.\n   */\n\n\n  var priorityQueue = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency); // Override push to accept second parameter representing priority\n\n    q.push = function (data, priority, callback) {\n      if (callback == null) callback = noop;\n\n      if (typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n\n      q.started = true;\n\n      if (!isArray(data)) {\n        data = [data];\n      }\n\n      if (data.length === 0) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n\n      priority = priority || 0;\n      var nextNode = q._tasks.head;\n\n      while (nextNode && priority >= nextNode.priority) {\n        nextNode = nextNode.next;\n      }\n\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          priority: priority,\n          callback: callback\n        };\n\n        if (nextNode) {\n          q._tasks.insertBefore(nextNode, item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n\n      setImmediate$1(q.process);\n    }; // Remove unshift function\n\n\n    delete q.unshift;\n    return q;\n  };\n  /**\n   * Runs the `tasks` array of functions in parallel, without waiting until the\n   * previous function has completed. Once any of the `tasks` complete or pass an\n   * error to its callback, the main `callback` is immediately called. It's\n   * equivalent to `Promise.race()`.\n   *\n   * @name race\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n   * to run. Each function can complete with an optional `result` value.\n   * @param {Function} callback - A callback to run once any of the functions have\n   * completed. This function gets an error or result from the first function that\n   * completed. Invoked with (err, result).\n   * @returns undefined\n   * @example\n   *\n   * async.race([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // main callback\n   * function(err, result) {\n   *     // the result will be equal to 'two' as it finishes earlier\n   * });\n   */\n\n\n  function race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n\n    for (var i = 0, l = tasks.length; i < l; i++) {\n      wrapAsync(tasks[i])(callback);\n    }\n  }\n  /**\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n   *\n   * @name reduceRight\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reduce]{@link module:Collections.reduce}\n   * @alias foldr\n   * @category Collection\n   * @param {Array} array - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee complete with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   */\n\n\n  function reduceRight(array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n  }\n  /**\n   * Wraps the async function in another function that always completes with a\n   * result object, even when it errors.\n   *\n   * The result object has either the property `error` or `value`.\n   *\n   * @name reflect\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function you want to wrap\n   * @returns {Function} - A function that always passes null to it's callback as\n   * the error. The second argument to the callback will be an `object` with\n   * either an `error` or a `value` property.\n   * @example\n   *\n   * async.parallel([\n   *     async.reflect(function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff but error ...\n   *         callback('bad stuff happened');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     })\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = 'bad stuff happened'\n   *     // results[2].value = 'two'\n   * });\n   */\n\n\n  function reflect(fn) {\n    var _fn = wrapAsync(fn);\n\n    return initialParams(function reflectOn(args, reflectCallback) {\n      args.push(function callback(error, cbArg) {\n        if (error) {\n          reflectCallback(null, {\n            error: error\n          });\n        } else {\n          var value;\n\n          if (arguments.length <= 2) {\n            value = cbArg;\n          } else {\n            value = slice(arguments, 1);\n          }\n\n          reflectCallback(null, {\n            value: value\n          });\n        }\n      });\n      return _fn.apply(this, args);\n    });\n  }\n\n  function reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function (value, cb) {\n      iteratee(value, function (err, v) {\n        cb(err, !v);\n      });\n    }, callback);\n  }\n  /**\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n   *\n   * @name reject\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @example\n   *\n   * async.reject(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, results) {\n   *     // results now equals an array of missing files\n   *     createFiles(results);\n   * });\n   */\n\n\n  var reject = doParallel(reject$1);\n  /**\n   * A helper function that wraps an array or an object of functions with `reflect`.\n   *\n   * @name reflectAll\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.reflect]{@link module:Utils.reflect}\n   * @category Util\n   * @param {Array|Object|Iterable} tasks - The collection of\n   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n   * @returns {Array} Returns an array of async functions, each wrapped in\n   * `async.reflect`\n   * @example\n   *\n   * let tasks = [\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         // do some more stuff but error ...\n   *         callback(new Error('bad stuff happened'));\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ];\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = Error('bad stuff happened')\n   *     // results[2].value = 'two'\n   * });\n   *\n   * // an example using an object instead of an array\n   * let tasks = {\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         callback('two');\n   *     },\n   *     three: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'three');\n   *         }, 100);\n   *     }\n   * };\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results.one.value = 'one'\n   *     // results.two.error = 'two'\n   *     // results.three.value = 'three'\n   * });\n   */\n\n  function reflectAll(tasks) {\n    var results;\n\n    if (isArray(tasks)) {\n      results = arrayMap(tasks, reflect);\n    } else {\n      results = {};\n      baseForOwn(tasks, function (task, key) {\n        results[key] = reflect.call(this, task);\n      });\n    }\n\n    return results;\n  }\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name rejectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   */\n\n\n  var rejectLimit = doParallelLimit(reject$1);\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n   *\n   * @name rejectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   */\n\n  var rejectSeries = doLimit(rejectLimit, 1);\n  /**\n   * Creates a function that returns `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {*} value The value to return from the new function.\n   * @returns {Function} Returns the new constant function.\n   * @example\n   *\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\n   *\n   * console.log(objects);\n   * // => [{ 'a': 1 }, { 'a': 1 }]\n   *\n   * console.log(objects[0] === objects[1]);\n   * // => true\n   */\n\n  function constant$1(value) {\n    return function () {\n      return value;\n    };\n  }\n  /**\n   * Attempts to get a successful response from `task` no more than `times` times\n   * before returning an error. If the task is successful, the `callback` will be\n   * passed the result of the successful task. If all attempts fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name retry\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @see [async.retryable]{@link module:ControlFlow.retryable}\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n   * object with `times` and `interval` or a number.\n   * * `times` - The number of attempts to make before giving up.  The default\n   *   is `5`.\n   * * `interval` - The time to wait between retries, in milliseconds.  The\n   *   default is `0`. The interval may also be specified as a function of the\n   *   retry count (see example).\n   * * `errorFilter` - An optional synchronous function that is invoked on\n   *   erroneous result. If it returns `true` the retry attempts will continue;\n   *   if the function returns `false` the retry flow is aborted with the current\n   *   attempt's error and result being returned to the final callback.\n   *   Invoked with (err).\n   * * If `opts` is a number, the number specifies the number of times to retry,\n   *   with the default interval of `0`.\n   * @param {AsyncFunction} task - An async function to retry.\n   * Invoked with (callback).\n   * @param {Function} [callback] - An optional callback which is called when the\n   * task has succeeded, or after the final failed attempt. It receives the `err`\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\n   * with (err, results).\n   *\n   * @example\n   *\n   * // The `retry` function can be used as a stand-alone control flow by passing\n   * // a callback, as shown below:\n   *\n   * // try calling apiMethod 3 times\n   * async.retry(3, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 10 times with exponential backoff\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n   * async.retry({\n   *   times: 10,\n   *   interval: function(retryCount) {\n   *     return 50 * Math.pow(2, retryCount);\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod the default 5 times no delay between each retry\n   * async.retry(apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod only when error condition satisfies, all other\n   * // errors will abort the retry control flow and return to final callback\n   * async.retry({\n   *   errorFilter: function(err) {\n   *     return err.message === 'Temporary error'; // only retry on a specific error\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // It can also be embedded within other control flow functions to retry\n   * // individual methods that are not as reliable, like this:\n   * async.auto({\n   *     users: api.getUsers.bind(api),\n   *     payments: async.retryable(3, api.getPayments.bind(api))\n   * }, function(err, results) {\n   *     // do something with the results\n   * });\n   *\n   */\n\n\n  function retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n    var options = {\n      times: DEFAULT_TIMES,\n      intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n      if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n        acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n        acc.errorFilter = t.errorFilter;\n      } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n      } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n      }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n      callback = task || noop;\n      task = opts;\n    } else {\n      parseTimes(options, opts);\n      callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n\n    function retryAttempt() {\n      _task(function (err) {\n        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n          setTimeout(retryAttempt, options.intervalFunc(attempt));\n        } else {\n          callback.apply(null, arguments);\n        }\n      });\n    }\n\n    retryAttempt();\n  }\n  /**\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n   * wraps a task and makes it retryable, rather than immediately calling it\n   * with retries.\n   *\n   * @name retryable\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.retry]{@link module:ControlFlow.retry}\n   * @category Control Flow\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n   * options, exactly the same as from `retry`\n   * @param {AsyncFunction} task - the asynchronous function to wrap.\n   * This function will be passed any arguments passed to the returned wrapper.\n   * Invoked with (...args, callback).\n   * @returns {AsyncFunction} The wrapped function, which when invoked, will\n   * retry on an error, based on the parameters specified in `opts`.\n   * This function will accept the same parameters as `task`.\n   * @example\n   *\n   * async.auto({\n   *     dep1: async.retryable(3, getFromFlakyService),\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n   *         maybeProcessData(results.dep1, cb);\n   *     })]\n   * }, callback);\n   */\n\n\n  var retryable = function (opts, task) {\n    if (!task) {\n      task = opts;\n      opts = null;\n    }\n\n    var _task = wrapAsync(task);\n\n    return initialParams(function (args, callback) {\n      function taskFn(cb) {\n        _task.apply(null, args.concat(cb));\n      }\n\n      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n    });\n  };\n  /**\n   * Run the functions in the `tasks` collection in series, each one running once\n   * the previous function has completed. If any functions in the series pass an\n   * error to its callback, no more functions are run, and `callback` is\n   * immediately called with the value of the error. Otherwise, `callback`\n   * receives an array of results when `tasks` have completed.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function, and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   *  results from {@link async.series}.\n   *\n   * **Note** that while many implementations preserve the order of object\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n   * explicitly states that\n   *\n   * > The mechanics and order of enumerating the properties is not specified.\n   *\n   * So if you rely on the order in which your series of functions are executed,\n   * and want this to work on all platforms, consider using an array.\n   *\n   * @name series\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection containing\n   * [async functions]{@link AsyncFunction} to run in series.\n   * Each function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This function gets a results array (or object)\n   * containing all the result arguments passed to the `task` callbacks. Invoked\n   * with (err, result).\n   * @example\n   * async.series([\n   *     function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     },\n   *     function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // results is now equal to ['one', 'two']\n   * });\n   *\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback){\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     // results is now equal to: {one: 1, two: 2}\n   * });\n   */\n\n\n  function series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n  }\n  /**\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\n   * If any iteratee call returns `true`, the main `callback` is immediately\n   * called.\n   *\n   * @name some\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias any\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @example\n   *\n   * async.some(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, result) {\n   *     // if result is true then at least one of the files exists\n   * });\n   */\n\n\n  var some = doParallel(_createTester(Boolean, identity));\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name someLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anyLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   */\n\n  var someLimit = doParallelLimit(_createTester(Boolean, identity));\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n   *\n   * @name someSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anySeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in series.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   */\n\n  var someSeries = doLimit(someLimit, 1);\n  /**\n   * Sorts a list by the results of running each `coll` value through an async\n   * `iteratee`.\n   *\n   * @name sortBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a value to use as the sort criteria as\n   * its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} callback - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is the items\n   * from the original `coll` sorted by the values returned by the `iteratee`\n   * calls. Invoked with (err, results).\n   * @example\n   *\n   * async.sortBy(['file1','file2','file3'], function(file, callback) {\n   *     fs.stat(file, function(err, stats) {\n   *         callback(err, stats.mtime);\n   *     });\n   * }, function(err, results) {\n   *     // results is now the original array of files sorted by\n   *     // modified date\n   * });\n   *\n   * // By modifying the callback parameter the\n   * // sorting order can be influenced:\n   *\n   * // ascending order\n   * async.sortBy([1,9,3,5], function(x, callback) {\n   *     callback(null, x);\n   * }, function(err,result) {\n   *     // result callback\n   * });\n   *\n   * // descending order\n   * async.sortBy([1,9,3,5], function(x, callback) {\n   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n   * }, function(err,result) {\n   *     // result callback\n   * });\n   */\n\n  function sortBy(coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    map(coll, function (x, callback) {\n      _iteratee(x, function (err, criteria) {\n        if (err) return callback(err);\n        callback(null, {\n          value: x,\n          criteria: criteria\n        });\n      });\n    }, function (err, results) {\n      if (err) return callback(err);\n      callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n      var a = left.criteria,\n          b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }\n  }\n  /**\n   * Sets a time limit on an asynchronous function. If the function does not call\n   * its callback within the specified milliseconds, it will be called with a\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n   *\n   * @name timeout\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} asyncFn - The async function to limit in time.\n   * @param {number} milliseconds - The specified time limit.\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n   * to timeout Error for more information..\n   * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n   * of the control flow functions.\n   * Invoke this function with the same parameters as you would `asyncFunc`.\n   * @example\n   *\n   * function myFunction(foo, callback) {\n   *     doAsyncTask(foo, function(err, data) {\n   *         // handle errors\n   *         if (err) return callback(err);\n   *\n   *         // do some stuff ...\n   *\n   *         // return processed data\n   *         return callback(null, data);\n   *     });\n   * }\n   *\n   * var wrapped = async.timeout(myFunction, 1000);\n   *\n   * // call `wrapped` as you would `myFunction`\n   * wrapped({ bar: 'bar' }, function(err, data) {\n   *     // if `myFunction` takes < 1000 ms to execute, `err`\n   *     // and `data` will have their expected values\n   *\n   *     // else `err` will be an Error with the code 'ETIMEDOUT'\n   * });\n   */\n\n\n  function timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n    return initialParams(function (args, callback) {\n      var timedOut = false;\n      var timer;\n\n      function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n\n        if (info) {\n          error.info = info;\n        }\n\n        timedOut = true;\n        callback(error);\n      }\n\n      args.push(function () {\n        if (!timedOut) {\n          callback.apply(null, arguments);\n          clearTimeout(timer);\n        }\n      }); // setup timer and call original function\n\n      timer = setTimeout(timeoutCallback, milliseconds);\n      fn.apply(null, args);\n    });\n  }\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeCeil = Math.ceil;\n  var nativeMax = Math.max;\n  /**\n   * The base implementation of `_.range` and `_.rangeRight` which doesn't\n   * coerce arguments.\n   *\n   * @private\n   * @param {number} start The start of the range.\n   * @param {number} end The end of the range.\n   * @param {number} step The value to increment or decrement by.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Array} Returns the range of numbers.\n   */\n\n  function baseRange(start, end, step, fromRight) {\n    var index = -1,\n        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n        result = Array(length);\n\n    while (length--) {\n      result[fromRight ? length : ++index] = start;\n      start += step;\n    }\n\n    return result;\n  }\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name timesLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} count - The number of times to run the function.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n   */\n\n\n  function timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n  }\n  /**\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\n   * manner you would use with [map]{@link module:Collections.map}.\n   *\n   * @name times\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @example\n   *\n   * // Pretend this is some complicated async factory\n   * var createUser = function(id, callback) {\n   *     callback(null, {\n   *         id: 'user' + id\n   *     });\n   * };\n   *\n   * // generate 5 users\n   * async.times(5, function(n, next) {\n   *     createUser(n, function(err, user) {\n   *         next(err, user);\n   *     });\n   * }, function(err, users) {\n   *     // we should now have 5 users\n   * });\n   */\n\n\n  var times = doLimit(timeLimit, Infinity);\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n   *\n   * @name timesSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   */\n\n  var timesSeries = doLimit(timeLimit, 1);\n  /**\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n   * element in series, each step potentially mutating an `accumulator` value.\n   * The type of the accumulator defaults to the type of collection passed in.\n   *\n   * @name transform\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n   * it will default to an empty Object or Array, depending on the type of `coll`\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * collection that potentially modifies the accumulator.\n   * Invoked with (accumulator, item, key, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the transformed accumulator.\n   * Invoked with (err, result).\n   * @example\n   *\n   * async.transform([1,2,3], function(acc, item, index, callback) {\n   *     // pointless async:\n   *     process.nextTick(function() {\n   *         acc.push(item * 2)\n   *         callback(null)\n   *     });\n   * }, function(err, result) {\n   *     // result is now equal to [2, 4, 6]\n   * });\n   *\n   * @example\n   *\n   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n   *     setImmediate(function () {\n   *         obj[key] = val * 2;\n   *         callback();\n   *     })\n   * }, function (err, result) {\n   *     // result is equal to {a: 2, b: 4, c: 6}\n   * })\n   */\n\n  function transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n      callback = iteratee;\n      iteratee = accumulator;\n      accumulator = isArray(coll) ? [] : {};\n    }\n\n    callback = once(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf(coll, function (v, k, cb) {\n      _iteratee(accumulator, v, k, cb);\n    }, function (err) {\n      callback(err, accumulator);\n    });\n  }\n  /**\n   * It runs each task in series but stops whenever any of the functions were\n   * successful. If one of the tasks were successful, the `callback` will be\n   * passed the result of the successful task. If all tasks fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name tryEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection containing functions to\n   * run, each function is passed a `callback(err, result)` it must call on\n   * completion with an error `err` (which can be `null`) and an optional `result`\n   * value.\n   * @param {Function} [callback] - An optional callback which is called when one\n   * of the tasks has succeeded, or all have failed. It receives the `err` and\n   * `result` arguments of the last attempt at completing the `task`. Invoked with\n   * (err, results).\n   * @example\n   * async.try([\n   *     function getDataFromFirstWebsite(callback) {\n   *         // Try getting the data from the first website\n   *         callback(err, data);\n   *     },\n   *     function getDataFromSecondWebsite(callback) {\n   *         // First website failed,\n   *         // Try getting the data from the backup website\n   *         callback(err, data);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     Now do something with the data.\n   * });\n   *\n   */\n\n\n  function tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function (task, callback) {\n      wrapAsync(task)(function (err, res\n      /*, ...args*/\n      ) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        } else {\n          result = res;\n        }\n\n        error = err;\n        callback(!err);\n      });\n    }, function () {\n      callback(error, result);\n    });\n  }\n  /**\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n   * unmemoized form. Handy for testing.\n   *\n   * @name unmemoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.memoize]{@link module:Utils.memoize}\n   * @category Util\n   * @param {AsyncFunction} fn - the memoized function\n   * @returns {AsyncFunction} a function that calls the original unmemoized function\n   */\n\n\n  function unmemoize(fn) {\n    return function () {\n      return (fn.unmemoized || fn).apply(null, arguments);\n    };\n  }\n  /**\n   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs.\n   *\n   * @name whilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Function} test - synchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with ().\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns undefined\n   * @example\n   *\n   * var count = 0;\n   * async.whilst(\n   *     function() { return count < 5; },\n   *     function(callback) {\n   *         count++;\n   *         setTimeout(function() {\n   *             callback(null, count);\n   *         }, 1000);\n   *     },\n   *     function (err, n) {\n   *         // 5 seconds have passed, n = 5\n   *     }\n   * );\n   */\n\n\n  function whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    if (!test()) return callback(null);\n\n    var next = function (err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      if (test()) return _iteratee(next);\n      var args = slice(arguments, 1);\n      callback.apply(null, [null].concat(args));\n    };\n\n    _iteratee(next);\n  }\n  /**\n   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs. `callback` will be passed an error and any\n   * arguments passed to the final `iteratee`'s callback.\n   *\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n   *\n   * @name until\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {Function} test - synchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with ().\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   */\n\n\n  function until(test, iteratee, callback) {\n    whilst(function () {\n      return !test.apply(this, arguments);\n    }, iteratee, callback);\n  }\n  /**\n   * Runs the `tasks` array of functions in series, each passing their results to\n   * the next in the array. However, if any of the `tasks` pass an error to their\n   * own callback, the next function is not executed, and the main `callback` is\n   * immediately called with the error.\n   *\n   * @name waterfall\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n   * to run.\n   * Each function should complete with any number of `result` values.\n   * The `result` values will be passed as arguments, in order, to the next task.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This will be passed the results of the last task's\n   * callback. Invoked with (err, [results]).\n   * @returns undefined\n   * @example\n   *\n   * async.waterfall([\n   *     function(callback) {\n   *         callback(null, 'one', 'two');\n   *     },\n   *     function(arg1, arg2, callback) {\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\n   *         callback(null, 'three');\n   *     },\n   *     function(arg1, callback) {\n   *         // arg1 now equals 'three'\n   *         callback(null, 'done');\n   *     }\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   *\n   * // Or, with named functions:\n   * async.waterfall([\n   *     myFirstFunction,\n   *     mySecondFunction,\n   *     myLastFunction,\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   * function myFirstFunction(callback) {\n   *     callback(null, 'one', 'two');\n   * }\n   * function mySecondFunction(arg1, arg2, callback) {\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\n   *     callback(null, 'three');\n   * }\n   * function myLastFunction(arg1, callback) {\n   *     // arg1 now equals 'three'\n   *     callback(null, 'done');\n   * }\n   */\n\n\n  var waterfall = function (tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n      var task = wrapAsync(tasks[taskIndex++]);\n      args.push(onlyOnce(next));\n      task.apply(null, args);\n    }\n\n    function next(err\n    /*, ...args*/\n    ) {\n      if (err || taskIndex === tasks.length) {\n        return callback.apply(null, arguments);\n      }\n\n      nextTask(slice(arguments, 1));\n    }\n\n    nextTask([]);\n  };\n  /**\n   * An \"async function\" in the context of Async is an asynchronous function with\n   * a variable number of parameters, with the final parameter being a callback.\n   * (`function (arg1, arg2, ..., callback) {}`)\n   * The final callback is of the form `callback(err, results...)`, which must be\n   * called once the function is completed.  The callback should be called with a\n   * Error as its first argument to signal that an error occurred.\n   * Otherwise, if no error occurred, it should be called with `null` as the first\n   * argument, and any additional `result` arguments that may apply, to signal\n   * successful completion.\n   * The callback must be called exactly once, ideally on a later tick of the\n   * JavaScript event loop.\n   *\n   * This type of function is also referred to as a \"Node-style async function\",\n   * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n   * library are themselves CPS/Node-style async functions, or functions that\n   * return CPS/Node-style async functions.\n   *\n   * Wherever we accept a Node-style async function, we also directly accept an\n   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n   * In this case, the `async` function will not be passed a final callback\n   * argument, and any thrown error will be used as the `err` argument of the\n   * implicit callback, and the return value will be used as the `result` value.\n   * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n   * argument, and a `resolved` value becomes the `result`.)\n   *\n   * Note, due to JavaScript limitations, we can only detect native `async`\n   * functions and not transpilied implementations.\n   * Your environment must have `async`/`await` support for this to work.\n   * (e.g. Node > v7.6, or a recent version of a modern browser).\n   * If you are using `async` functions through a transpiler (e.g. Babel), you\n   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n   * because the `async function` will be compiled to an ordinary function that\n   * returns a promise.\n   *\n   * @typedef {Function} AsyncFunction\n   * @static\n   */\n\n  /**\n   * Async is a utility module which provides straight-forward, powerful functions\n   * for working with asynchronous JavaScript. Although originally designed for\n   * use with [Node.js](http://nodejs.org) and installable via\n   * `npm install --save async`, it can also be used directly in the browser.\n   * @module async\n   * @see AsyncFunction\n   */\n\n  /**\n   * A collection of `async` functions for manipulating collections, such as\n   * arrays and objects.\n   * @module Collections\n   */\n\n  /**\n   * A collection of `async` functions for controlling the flow through a script.\n   * @module ControlFlow\n   */\n\n  /**\n   * A collection of `async` utility functions.\n   * @module Utils\n   */\n\n\n  var index = {\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    apply: apply,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n    // aliases\n    all: every,\n    any: some,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n  };\n  exports['default'] = index;\n  exports.applyEach = applyEach;\n  exports.applyEachSeries = applyEachSeries;\n  exports.apply = apply;\n  exports.asyncify = asyncify;\n  exports.auto = auto;\n  exports.autoInject = autoInject;\n  exports.cargo = cargo;\n  exports.compose = compose;\n  exports.concat = concat;\n  exports.concatLimit = concatLimit;\n  exports.concatSeries = concatSeries;\n  exports.constant = constant;\n  exports.detect = detect;\n  exports.detectLimit = detectLimit;\n  exports.detectSeries = detectSeries;\n  exports.dir = dir;\n  exports.doDuring = doDuring;\n  exports.doUntil = doUntil;\n  exports.doWhilst = doWhilst;\n  exports.during = during;\n  exports.each = eachLimit;\n  exports.eachLimit = eachLimit$1;\n  exports.eachOf = eachOf;\n  exports.eachOfLimit = eachOfLimit;\n  exports.eachOfSeries = eachOfSeries;\n  exports.eachSeries = eachSeries;\n  exports.ensureAsync = ensureAsync;\n  exports.every = every;\n  exports.everyLimit = everyLimit;\n  exports.everySeries = everySeries;\n  exports.filter = filter;\n  exports.filterLimit = filterLimit;\n  exports.filterSeries = filterSeries;\n  exports.forever = forever;\n  exports.groupBy = groupBy;\n  exports.groupByLimit = groupByLimit;\n  exports.groupBySeries = groupBySeries;\n  exports.log = log;\n  exports.map = map;\n  exports.mapLimit = mapLimit;\n  exports.mapSeries = mapSeries;\n  exports.mapValues = mapValues;\n  exports.mapValuesLimit = mapValuesLimit;\n  exports.mapValuesSeries = mapValuesSeries;\n  exports.memoize = memoize;\n  exports.nextTick = nextTick;\n  exports.parallel = parallelLimit;\n  exports.parallelLimit = parallelLimit$1;\n  exports.priorityQueue = priorityQueue;\n  exports.queue = queue$1;\n  exports.race = race;\n  exports.reduce = reduce;\n  exports.reduceRight = reduceRight;\n  exports.reflect = reflect;\n  exports.reflectAll = reflectAll;\n  exports.reject = reject;\n  exports.rejectLimit = rejectLimit;\n  exports.rejectSeries = rejectSeries;\n  exports.retry = retry;\n  exports.retryable = retryable;\n  exports.seq = seq;\n  exports.series = series;\n  exports.setImmediate = setImmediate$1;\n  exports.some = some;\n  exports.someLimit = someLimit;\n  exports.someSeries = someSeries;\n  exports.sortBy = sortBy;\n  exports.timeout = timeout;\n  exports.times = times;\n  exports.timesLimit = timeLimit;\n  exports.timesSeries = timesSeries;\n  exports.transform = transform;\n  exports.tryEach = tryEach;\n  exports.unmemoize = unmemoize;\n  exports.until = until;\n  exports.waterfall = waterfall;\n  exports.whilst = whilst;\n  exports.all = every;\n  exports.allLimit = everyLimit;\n  exports.allSeries = everySeries;\n  exports.any = some;\n  exports.anyLimit = someLimit;\n  exports.anySeries = someSeries;\n  exports.find = detect;\n  exports.findLimit = detectLimit;\n  exports.findSeries = detectSeries;\n  exports.forEach = eachLimit;\n  exports.forEachSeries = eachSeries;\n  exports.forEachLimit = eachLimit$1;\n  exports.forEachOf = eachOf;\n  exports.forEachOfSeries = eachOfSeries;\n  exports.forEachOfLimit = eachOfLimit;\n  exports.inject = reduce;\n  exports.foldl = reduce;\n  exports.foldr = reduceRight;\n  exports.select = filter;\n  exports.selectLimit = filterLimit;\n  exports.selectSeries = filterSeries;\n  exports.wrapSync = asyncify;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["C:/Users/Ossi Laurila/Desktop/weatherapp/node_modules/@fmidev/metolib/node_modules/async/dist/async.js"],"names":["global","factory","exports","module","define","amd","async","slice","arrayLike","start","newLen","Math","max","length","newArr","Array","idx","initialParams","fn","args","arguments","callback","pop","call","isObject","value","type","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","apply","_defer","setImmediate$1","asyncify","func","result","e","then","invokeCallback","err","message","Error","error","rethrow","supportsSymbol","Symbol","isAsync","toStringTag","wrapAsync","asyncFn","applyEach$1","eachfn","fns","go","that","cb","concat","freeGlobal","Object","freeSelf","self","root","Function","Symbol$1","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag$1","undefined","getRawTag","isOwn","tag","unmasked","objectProto$1","nativeObjectToString$1","objectToString","nullTag","undefinedTag","symToStringTag","baseGetTag","asyncTag","funcTag","genTag","proxyTag","isFunction","MAX_SAFE_INTEGER","isLength","isArrayLike","breakLoop","noop","once","callFn","iteratorSymbol","iterator","getIterator","coll","baseTimes","n","iteratee","index","isObjectLike","argsTag","baseIsArguments","objectProto$3","hasOwnProperty$2","propertyIsEnumerable","isArguments","isArray","stubFalse","freeExports","nodeType","freeModule","moduleExports","Buffer","nativeIsBuffer","isBuffer","MAX_SAFE_INTEGER$1","reIsUint","isIndex","test","argsTag$1","arrayTag","boolTag","dateTag","errorTag","funcTag$1","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseIsTypedArray","baseUnary","freeExports$1","freeModule$1","moduleExports$1","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","objectProto$2","hasOwnProperty$1","arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","String","key","push","objectProto$5","isPrototype","Ctor","constructor","proto","overArg","transform","arg","nativeKeys","keys","objectProto$4","hasOwnProperty$3","baseKeys","object","createArrayIterator","i","len","next","createES2015Iterator","item","done","createObjectIterator","obj","okeys","onlyOnce","_eachOfLimit","limit","nextElem","running","iterateeCallback","replenish","elem","eachOfLimit","doLimit","iterable","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","doParallel","_asyncMap","arr","results","counter","_iteratee","_","v","map","applyEach","doParallelLimit","mapLimit","mapSeries","applyEachSeries","callArgs","arrayEach","array","createBaseFor","fromRight","keysFunc","props","baseFor","baseForOwn","baseFindIndex","predicate","fromIndex","baseIsNaN","strictIndexOf","baseIndexOf","auto","tasks","concurrency","keys$$1","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","task","enqueueTask","dependencies","remainingDependencies","dependencyName","join","addListener","checkForDeadlocks","processQueue","runTask","run","shift","taskName","taskListeners","taskComplete","taskCallback","safeResults","val","rkey","taskFn","currentTask","getDependents","dependent","arrayMap","symbolTag","isSymbol","INFINITY","symbolProto","symbolToString","baseToString","baseSlice","end","castSlice","charsEndIndex","strSymbols","chrSymbols","charsStartIndex","asciiToArray","string","split","rsAstralRange","rsComboMarksRange","rsComboSymbolsRange","rsVarRange","rsZWJ","reHasUnicode","RegExp","hasUnicode","rsAstralRange$1","rsComboMarksRange$1","rsComboSymbolsRange$1","rsVarRange$1","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsZWJ$1","reOptMod","rsOptVar","rsOptJoin","rsSeq","rsSymbol","reUnicode","unicodeToArray","match","stringToArray","reTrim","trim","chars","guard","replace","FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","parseParams","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","name","DLL","head","tail","setInitial","dll","node","removeLink","prev","empty","insertAfter","newNode","insertBefore","unshift","toArray","curr","data","remove","testFn","queue","worker","payload","_worker","numRunning","workersList","_insert","insertAtFront","q","started","idle","drain","l","_tasks","_next","splice","buffer","unsaturated","isProcessing","saturated","paused","kill","min","pause","resume","cargo","eachOfSeries","reduce","memo","x","seq","_functions","newargs","nextargs","compose","reverse","_concat","concatLimit","mapResults","concatSeries","constant","values","identity","_createTester","check","getResult","testPassed","testResult","_findGetResult","detect","detectLimit","detectSeries","consoleFunc","console","dir","doDuring","_fn","_test","truth","doWhilst","doUntil","during","_withoutIndex","eachLimit","eachLimit$1","eachSeries","ensureAsync","sync","innerArgs","notId","every","everyLimit","everySeries","baseProperty","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter","filterLimit","filterSeries","forever","errback","groupByLimit","groupBy","groupBySeries","log","mapValuesLimit","newObj","mapValues","mapValuesSeries","has","memoize","hasher","queues","memoized","unmemoized","_defer$1","_parallel","parallelLimit","parallelLimit$1","queue$1","items","priorityQueue","priority","nextNode","race","TypeError","reduceRight","reversed","reflect","reflectOn","reflectCallback","cbArg","reject$1","reject","reflectAll","rejectLimit","rejectSeries","constant$1","retry","opts","DEFAULT_TIMES","DEFAULT_INTERVAL","options","times","intervalFunc","parseTimes","acc","t","interval","errorFilter","_task","attempt","retryAttempt","retryable","series","some","Boolean","someLimit","someSeries","sortBy","criteria","comparator","left","right","timeout","milliseconds","info","timedOut","timer","timeoutCallback","code","clearTimeout","nativeCeil","ceil","nativeMax","baseRange","step","timeLimit","count","timesSeries","accumulator","k","tryEach","res","unmemoize","whilst","until","waterfall","taskIndex","nextTask","each","parallel","timesLimit","all","any","forEach","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","allLimit","allSeries","anyLimit","anySeries","find","findLimit","findSeries","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.async = global.async || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction slice(arrayLike, start) {\n    start = start|0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n    for(var idx = 0; idx < newLen; idx++)  {\n        newArr[idx] = arrayLike[start + idx];\n    }\n    return newArr;\n}\n\nvar initialParams = function (fn) {\n    return function (/*...args, callback*/) {\n        var args = slice(arguments);\n        var callback = args.pop();\n        fn.call(this, args, callback);\n    };\n};\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        defer(function () {\n            fn.apply(null, args);\n        });\n    };\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (isObject(result) && typeof result.then === 'function') {\n            result.then(function(value) {\n                invokeCallback(callback, null, value);\n            }, function(err) {\n                invokeCallback(callback, err.message ? err : new Error(err));\n            });\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (e) {\n        setImmediate$1(rethrow, e);\n    }\n}\n\nfunction rethrow(error) {\n    throw error;\n}\n\nvar supportsSymbol = typeof Symbol === 'function';\n\nfunction isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\nfunction applyEach$1(eachfn) {\n    return function(fns/*, ...args*/) {\n        var args = slice(arguments, 1);\n        var go = initialParams(function(args, callback) {\n            var that = this;\n            return eachfn(fns, function (fn, cb) {\n                wrapAsync(fn).apply(that, args.concat(cb));\n            }, callback);\n        });\n        if (args.length) {\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n}\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$1.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString$1.call(value);\n}\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  value = Object(value);\n  return (symToStringTag && symToStringTag in value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]';\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nvar breakLoop = {};\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nfunction once(fn) {\n    return function () {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\nvar getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n};\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/** `Object#toString` result references. */\nvar argsTag$1 = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag$1 = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/** Detect free variable `exports`. */\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports$1 && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\n\n  return value === proto;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key: key} : null;\n    };\n}\n\nfunction iterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function() {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nfunction _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n        callback = once(callback || noop);\n        if (limit <= 0 || !obj) {\n            return callback(null);\n        }\n        var nextElem = iterator(obj);\n        var done = false;\n        var running = 0;\n\n        function iterateeCallback(err, value) {\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n        }\n\n        replenish();\n    };\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nfunction doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n        return fn(iterable, limit, iteratee, callback);\n    };\n}\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nvar eachOf = function(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n};\n\nfunction doParallel(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    eachfn(arr, function (value, _, callback) {\n        var index = counter++;\n        _iteratee(value, function (err, v) {\n            results[index] = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nvar map = doParallel(_asyncMap);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );\n */\nvar applyEach = applyEach$1(map);\n\nfunction doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapLimit = doParallelLimit(_asyncMap);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapSeries = doLimit(mapLimit, 1);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument is provided, it will return\n * a function which lets you pass in the arguments as if it were a single\n * function call.\n */\nvar applyEachSeries = applyEach$1(mapSeries);\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nvar apply = function(fn/*, ...args*/) {\n    var args = slice(arguments, 1);\n    return function(/*callArgs*/) {\n        var callArgs = slice(arguments);\n        return fn.apply(null, args.concat(callArgs));\n    };\n};\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns undefined\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nvar auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    baseForOwn(tasks, function (task, key) {\n        if (!isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        arrayEach(dependencies, function (dependencyName) {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, function () {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(function () {\n            runTask(key, task);\n        });\n    }\n\n    function processQueue() {\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        arrayEach(taskListeners, function (fn) {\n            fn();\n        });\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce(function(err, result) {\n            runningTasks--;\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            if (err) {\n                var safeResults = {};\n                baseForOwn(results, function(val, rkey) {\n                    safeResults[rkey] = val;\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            arrayEach(getDependents(currentTask), function (dependent) {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        baseForOwn(tasks, function (task, key) {\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n};\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0';\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20f0';\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange$1 + ']';\nvar rsCombo = '[' + rsComboMarksRange$1 + rsComboSymbolsRange$1 + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsZWJ$1 = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg){\n        return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    baseForOwn(tasks, function (taskFn, key) {\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (isArray(taskFn)) {\n            params = taskFn.slice(0, -1);\n            taskFn = taskFn[taskFn.length - 1];\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = arrayMap(params, function (name) {\n                return results[name];\n            });\n            newArgs.push(taskCb);\n            wrapAsync(taskFn).apply(null, newArgs);\n        }\n    });\n\n    auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nfunction DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function(node) {\n    if (node.prev) node.prev.next = node.next;\n    else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;\n    else this.tail = node.prev;\n\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n};\n\nDLL.prototype.empty = function () {\n    while(this.head) this.shift();\n    return this;\n};\n\nDLL.prototype.insertAfter = function(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;\n    else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.insertBefore = function(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;\n    else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.unshift = function(node) {\n    if (this.head) this.insertBefore(this.head, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.push = function(node) {\n    if (this.tail) this.insertAfter(this.tail, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.shift = function() {\n    return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function() {\n    return this.tail && this.removeLink(this.tail);\n};\n\nDLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n    for(var idx = 0; idx < this.length; idx++) {\n        arr[idx] = curr.data;\n        curr = curr.next;\n    }\n    return arr;\n};\n\nDLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n    while(!!curr) {\n        var next = curr.next;\n        if (testFn(curr)) {\n            this.removeLink(curr);\n        }\n        curr = next;\n    }\n    return this;\n};\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new Error('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n\n    function _insert(data, insertAtFront, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                callback: callback || noop\n            };\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    }\n\n    function _next(tasks) {\n        return function(err){\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = baseIndexOf(workersList, task, 0);\n                if (index >= 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback.apply(task, arguments);\n\n                if (err != null) {\n                    q.error(err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                q.unsaturated();\n            }\n\n            if (q.idle()) {\n                q.drain();\n            }\n            q.process();\n        };\n    }\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        concurrency: concurrency,\n        payload: payload,\n        saturated: noop,\n        unsaturated:noop,\n        buffer: concurrency / 4,\n        empty: noop,\n        drain: noop,\n        error: noop,\n        started: false,\n        paused: false,\n        push: function (data, callback) {\n            _insert(data, false, callback);\n        },\n        kill: function () {\n            q.drain = noop;\n            q._tasks.empty();\n        },\n        unshift: function (data, callback) {\n            _insert(data, true, callback);\n        },\n        remove: function (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process: function () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    q.empty();\n                }\n\n                if (numRunning === q.concurrency) {\n                    q.saturated();\n                }\n\n                var cb = onlyOnce(_next(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length: function () {\n            return q._tasks.length;\n        },\n        running: function () {\n            return numRunning;\n        },\n        workersList: function () {\n            return workersList;\n        },\n        idle: function() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause: function () {\n            q.paused = true;\n        },\n        resume: function () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    return q;\n}\n\n/**\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n * @typedef {Object} CargoObject\n * @memberOf module:ControlFlow\n * @property {Function} length - A function returning the number of items\n * waiting to be processed. Invoke like `cargo.length()`.\n * @property {number} payload - An `integer` for determining how many tasks\n * should be process per round. This property can be changed after a `cargo` is\n * created to alter the payload on-the-fly.\n * @property {Function} push - Adds `task` to the `queue`. The callback is\n * called once the `worker` has finished processing the task. Instead of a\n * single task, an array of `tasks` can be submitted. The respective callback is\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n * @property {Function} saturated - A callback that is called when the\n * `queue.length()` hits the concurrency and further tasks will be queued.\n * @property {Function} empty - A callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - A callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke like `cargo.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n */\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargo.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachOfSeries = doLimit(eachOfLimit, 1);\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    eachOfSeries(coll, function(x, i, callback) {\n        _iteratee(memo, x, function(err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function(err) {\n        callback(err, memo);\n    });\n}\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(/*...functions*/) {\n    var _functions = arrayMap(arguments, wrapAsync);\n    return function(/*...args*/) {\n        var args = slice(arguments);\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = noop;\n        }\n\n        reduce(_functions, args, function(newargs, fn, cb) {\n            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {\n                var nextargs = slice(arguments, 1);\n                cb(err, nextargs);\n            }));\n        },\n        function(err, results) {\n            cb.apply(that, [err].concat(results));\n        });\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nvar compose = function(/*...args*/) {\n    return seq.apply(null, slice(arguments).reverse());\n};\n\nvar _concat = Array.prototype.concat;\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err /*, ...args*/) {\n            if (err) return callback(err);\n            return callback(null, slice(arguments, 1));\n        });\n    }, function(err, mapResults) {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = _concat.apply(result, mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. There is no guarantee that the\n * results array will be returned in the original order of `coll` passed to the\n * `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nvar concat = doLimit(concatLimit, Infinity);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatSeries = doLimit(concatLimit, 1);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nvar constant = function(/*...values*/) {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function (/*...ignoredArgs, callback*/) {\n        var callback = arguments[arguments.length - 1];\n        return callback.apply(this, args);\n    };\n};\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nfunction _createTester(check, getResult) {\n    return function(eachfn, arr, iteratee, cb) {\n        cb = cb || noop;\n        var testPassed = false;\n        var testResult;\n        eachfn(arr, function(value, _, callback) {\n            iteratee(value, function(err, result) {\n                if (err) {\n                    callback(err);\n                } else if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    callback(null, breakLoop);\n                } else {\n                    callback();\n                }\n            });\n        }, function(err) {\n            if (err) {\n                cb(err);\n            } else {\n                cb(null, testPassed ? testResult : getResult(false));\n            }\n        });\n    };\n}\n\nfunction _findGetResult(v, x) {\n    return x;\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nvar detect = doParallel(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectSeries = doLimit(detectLimit, 1);\n\nfunction consoleFunc(name) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        args.push(function (err/*, ...args*/) {\n            var args = slice(arguments, 1);\n            if (typeof console === 'object') {\n                if (err) {\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) {\n                    arrayEach(args, function (x) {\n                        console[name](x);\n                    });\n                }\n            }\n        });\n        wrapAsync(fn).apply(null, args);\n    };\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n * the order of operations, the arguments `test` and `fn` are switched.\n *\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n * @name doDuring\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.during]{@link module:ControlFlow.during}\n * @category Control Flow\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error if one occurred, otherwise `null`.\n */\nfunction doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        args.push(check);\n        _test.apply(this, args);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    check(null, true);\n\n}\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        if (test.apply(this, args)) return _iteratee(next);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function() {\n        return !test.apply(this, arguments);\n    }, callback);\n}\n\n/**\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occurred, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );\n */\nfunction during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err) {\n        if (err) return callback(err);\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    _test(check);\n}\n\nfunction _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n        return iteratee(value, callback);\n    };\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachSeries = doLimit(eachLimit$1, 1);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n        var sync = true;\n        args.push(function () {\n            var innerArgs = arguments;\n            if (sync) {\n                setImmediate$1(function () {\n                    callback.apply(null, innerArgs);\n                });\n            } else {\n                callback.apply(null, innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    });\n}\n\nfunction notId(v) {\n    return !v;\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nvar every = doParallel(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everySeries = doLimit(everyLimit, 1);\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            truthValues[index] = !!v;\n            callback(err);\n        });\n    }, function (err) {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            if (err) {\n                callback(err);\n            } else {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            }\n        });\n    }, function (err) {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, arrayMap(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), baseProperty('value')));\n        }\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nvar filter = doParallel(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar filterLimit = doParallelLimit(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n */\nvar filterSeries = doLimit(filterLimit, 1);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupByLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err, key) {\n            if (err) return callback(err);\n            return callback(null, {key: key, val: val});\n        });\n    }, function(err, mapResults) {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var key = mapResults[i].key;\n                var val = mapResults[i].val;\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nvar groupBy = doLimit(groupByLimit, Infinity);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupBySeries = doLimit(groupByLimit, 1);\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    eachOfLimit(obj, limit, function(val, key, next) {\n        _iteratee(val, key, function (err, result) {\n            if (err) return next(err);\n            newObj[key] = result;\n            next();\n        });\n    }, function (err) {\n        callback(err, newObj);\n    });\n}\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\n\nvar mapValues = doLimit(mapValuesLimit, Infinity);\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\n\nfunction has(obj, key) {\n    return key in obj;\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams(function memoized(args, callback) {\n        var key = hasher.apply(null, args);\n        if (has(memo, key)) {\n            setImmediate$1(function() {\n                callback.apply(null, memo[key]);\n            });\n        } else if (has(queues, key)) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn.apply(null, args.concat(function(/*args*/) {\n                var args = slice(arguments);\n                memo[key] = args;\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i].apply(null, args);\n                }\n            }));\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `setImmediate`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @alias setImmediate\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nfunction _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, function (task, key, callback) {\n        wrapAsync(task)(function (err, result) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            results[key] = result;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Object} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {Function} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a callback that is called when the number of\n * running workers hits the `concurrency` limit, and further tasks will be\n * queued.\n * @property {Function} unsaturated - a callback that is called when the number\n * of running workers is less than the `concurrency` & `buffer` limits, and\n * further tasks will not be queued.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - a callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} error - a callback that is called when a task errors.\n * Has the signature `function(error, task)`.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain = function() {\n *     console.log('all items have been processed');\n * };\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * q.push({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nvar queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue(function (items, cb) {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n};\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nvar priorityQueue = function(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority, callback) {\n        if (callback == null) callback = noop;\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        priority = priority || 0;\n        var nextNode = q._tasks.head;\n        while (nextNode && priority >= nextNode.priority) {\n            nextNode = nextNode.next;\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority: priority,\n                callback: callback\n            };\n\n            if (nextNode) {\n                q._tasks.insertBefore(nextNode, item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n};\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push(function callback(error, cbArg) {\n            if (error) {\n                reflectCallback(null, { error: error });\n            } else {\n                var value;\n                if (arguments.length <= 2) {\n                    value = cbArg;\n                } else {\n                    value = slice(arguments, 1);\n                }\n                reflectCallback(null, { value: value });\n            }\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\nfunction reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function(value, cb) {\n        iteratee(value, function(err, v) {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nvar reject = doParallel(reject$1);\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (isArray(tasks)) {\n        results = arrayMap(tasks, reflect);\n    } else {\n        results = {};\n        baseForOwn(tasks, function(task, key) {\n            results[key] = reflect.call(this, task);\n        });\n    }\n    return results;\n}\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectLimit = doParallelLimit(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectSeries = doLimit(rejectLimit, 1);\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant$1(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // It can also be embedded within other control flow functions to retry\n * // individual methods that are not as reliable, like this:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nfunction retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || noop;\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task(function(err) {\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\n            } else {\n                callback.apply(null, arguments);\n            }\n        });\n    }\n\n    retryAttempt();\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nvar retryable = function (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    var _task = wrapAsync(task);\n    return initialParams(function (args, callback) {\n        function taskFn(cb) {\n            _task.apply(null, args.concat(cb));\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n    });\n};\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nvar some = doParallel(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someSeries = doLimit(someLimit, 1);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    map(coll, function (x, callback) {\n        _iteratee(x, function (err, criteria) {\n            if (err) return callback(err);\n            callback(null, {value: x, criteria: criteria});\n        });\n    }, function (err, results) {\n        if (err) return callback(err);\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams(function (args, callback) {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push(function () {\n            if (!timedOut) {\n                callback.apply(null, arguments);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn.apply(null, args);\n    });\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n */\nfunction timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nvar times = doLimit(timeLimit, Infinity);\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n */\nvar timesSeries = doLimit(timeLimit, 1);\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in series, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc.push(item * 2)\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = isArray(coll) ? [] : {};\n    }\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf(coll, function(v, k, cb) {\n        _iteratee(accumulator, v, k, cb);\n    }, function(err) {\n        callback(err, accumulator);\n    });\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @example\n * async.try([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function(task, callback) {\n        wrapAsync(task)(function (err, res/*, ...args*/) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            } else {\n                result = res;\n            }\n            error = err;\n            callback(!err);\n        });\n    }, function () {\n        callback(error, result);\n    });\n}\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    if (!test()) return callback(null);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        if (test()) return _iteratee(next);\n        var args = slice(arguments, 1);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, iteratee, callback) {\n    whilst(function() {\n        return !test.apply(this, arguments);\n    }, iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nvar waterfall = function(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        args.push(onlyOnce(next));\n        task.apply(null, args);\n    }\n\n    function next(err/*, ...args*/) {\n        if (err || taskIndex === tasks.length) {\n            return callback.apply(null, arguments);\n        }\n        nextTask(slice(arguments, 1));\n    }\n\n    nextTask([]);\n};\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\n/**\n * Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n * @see AsyncFunction\n */\n\n\n/**\n * A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections\n */\n\n/**\n * A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow\n */\n\n/**\n * A collection of `async` utility functions.\n * @module Utils\n */\n\nvar index = {\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    apply: apply,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n\n    // aliases\n    all: every,\n    any: some,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n};\n\nexports['default'] = index;\nexports.applyEach = applyEach;\nexports.applyEachSeries = applyEachSeries;\nexports.apply = apply;\nexports.asyncify = asyncify;\nexports.auto = auto;\nexports.autoInject = autoInject;\nexports.cargo = cargo;\nexports.compose = compose;\nexports.concat = concat;\nexports.concatLimit = concatLimit;\nexports.concatSeries = concatSeries;\nexports.constant = constant;\nexports.detect = detect;\nexports.detectLimit = detectLimit;\nexports.detectSeries = detectSeries;\nexports.dir = dir;\nexports.doDuring = doDuring;\nexports.doUntil = doUntil;\nexports.doWhilst = doWhilst;\nexports.during = during;\nexports.each = eachLimit;\nexports.eachLimit = eachLimit$1;\nexports.eachOf = eachOf;\nexports.eachOfLimit = eachOfLimit;\nexports.eachOfSeries = eachOfSeries;\nexports.eachSeries = eachSeries;\nexports.ensureAsync = ensureAsync;\nexports.every = every;\nexports.everyLimit = everyLimit;\nexports.everySeries = everySeries;\nexports.filter = filter;\nexports.filterLimit = filterLimit;\nexports.filterSeries = filterSeries;\nexports.forever = forever;\nexports.groupBy = groupBy;\nexports.groupByLimit = groupByLimit;\nexports.groupBySeries = groupBySeries;\nexports.log = log;\nexports.map = map;\nexports.mapLimit = mapLimit;\nexports.mapSeries = mapSeries;\nexports.mapValues = mapValues;\nexports.mapValuesLimit = mapValuesLimit;\nexports.mapValuesSeries = mapValuesSeries;\nexports.memoize = memoize;\nexports.nextTick = nextTick;\nexports.parallel = parallelLimit;\nexports.parallelLimit = parallelLimit$1;\nexports.priorityQueue = priorityQueue;\nexports.queue = queue$1;\nexports.race = race;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.reflect = reflect;\nexports.reflectAll = reflectAll;\nexports.reject = reject;\nexports.rejectLimit = rejectLimit;\nexports.rejectSeries = rejectSeries;\nexports.retry = retry;\nexports.retryable = retryable;\nexports.seq = seq;\nexports.series = series;\nexports.setImmediate = setImmediate$1;\nexports.some = some;\nexports.someLimit = someLimit;\nexports.someSeries = someSeries;\nexports.sortBy = sortBy;\nexports.timeout = timeout;\nexports.times = times;\nexports.timesLimit = timeLimit;\nexports.timesSeries = timesSeries;\nexports.transform = transform;\nexports.tryEach = tryEach;\nexports.unmemoize = unmemoize;\nexports.until = until;\nexports.waterfall = waterfall;\nexports.whilst = whilst;\nexports.all = every;\nexports.allLimit = everyLimit;\nexports.allSeries = everySeries;\nexports.any = some;\nexports.anyLimit = someLimit;\nexports.anySeries = someSeries;\nexports.find = detect;\nexports.findLimit = detectLimit;\nexports.findSeries = detectSeries;\nexports.forEach = eachLimit;\nexports.forEachSeries = eachSeries;\nexports.forEachLimit = eachLimit$1;\nexports.forEachOf = eachOf;\nexports.forEachOfSeries = eachOfSeries;\nexports.forEachOfLimit = eachOfLimit;\nexports.inject = reduce;\nexports.foldl = reduce;\nexports.foldr = reduceRight;\nexports.select = filter;\nexports.selectLimit = filterLimit;\nexports.selectSeries = filterSeries;\nexports.wrapSync = asyncify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]},"metadata":{},"sourceType":"script"}